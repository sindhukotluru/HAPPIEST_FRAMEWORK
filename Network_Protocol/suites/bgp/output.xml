<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20181213 12:36:40.338" generator="Robot 3.1 (Python 3.5.2 on linux)" rpa="false">
<suite id="s1" source="/root/L3VPN/HAPPIEST_FRAMEWORK/Network_Protocol/suites/bgp/BGP_OSPF_Test_with_GNS3.robot" name="BGP OSPF Test with GNS3">
<test id="s1-t1" name="Configure IP addresses as per the topology">
<kw library="Resource" name="Configure ip address">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Links_of_R1}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R1}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:36:40.931">${load_device_R1} = ['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'configure']</msg>
<status status="PASS" starttime="20181213 12:36:40.930" endtime="20181213 12:36:40.931"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${Links_of_R2}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:36:40.933">${load_device_R2} = ['R2', ['Link_R1_R2_1', 'Link_R2_R4_1', 'Link_R2_R3_1'], 'configure']</msg>
<status status="PASS" starttime="20181213 12:36:40.932" endtime="20181213 12:36:40.933"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${Links_of_R3}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:36:40.935">${load_device_R3} = ['R3', ['Link_R1_R3_1', 'Link_R3_R5_1', 'Link_R2_R3_1'], 'configure']</msg>
<status status="PASS" starttime="20181213 12:36:40.934" endtime="20181213 12:36:40.935"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${Links_of_R4}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R4}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:36:40.936">${load_device_R4} = ['R4', ['Link_R2_R4_1', 'Link_R4_PC-1_1'], 'configure']</msg>
<status status="PASS" starttime="20181213 12:36:40.935" endtime="20181213 12:36:40.936"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${Links_of_R5}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R5}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:36:40.939">${load_device_R5} = ['R5', ['Link_R3_R5_1', 'Link_R5_PC-2_1'], 'configure']</msg>
<status status="PASS" starttime="20181213 12:36:40.937" endtime="20181213 12:36:40.939"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>PC-1</arg>
<arg>configure</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${load_device_PC1}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:36:40.940">${load_device_PC1} = ['PC-1', 'configure', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:36:40.939" endtime="20181213 12:36:40.940"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>Ubuntu</arg>
<arg>configure</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${load_device_PC2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:36:40.942">${load_device_PC2} = ['Ubuntu', 'configure', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:36:40.941" endtime="20181213 12:36:40.942"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${load_device_R1}</arg>
<arg>${load_device_R2}</arg>
<arg>${load_device_R3}</arg>
<arg>${load_device_R4}</arg>
<arg>${load_device_R5}</arg>
<arg>${load_device_PC1}</arg>
<arg>${load_device_PC2}</arg>
</arguments>
<assign>
<var>${load_devices}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:36:40.945">${load_devices} = [['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'configure'], ['R2', ['Link_R1_R2_1', 'Link_R2_R4_1', 'Link_R2_R3_1'], 'configure'], ['R3', ['Link_R1_R3_1', 'Link_R3_R5_1', 'Link_R2_R3_1'], 'configure'], ['...</msg>
<status status="PASS" starttime="20181213 12:36:40.943" endtime="20181213 12:36:40.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start configure</arg>
<arg>${load_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure">
<arguments>
<arg>${load_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:37:07.674">Configuring IP address for R1Configuring IP address for R2Configuring IP address for R3Configuring IP address for R4Configuring IP address for R5Waiting thread #ConfigureRouter_R1

R1#
R1#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#              interface Ethernet 1/0
R1(config-if)#
R1(config-if)#              ip address 192.168.23.3  255.255.255.0
R1(config-if)#
R1(config-if)#              no shutdown
R1(config-if)#
R1(config-if)#              

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/0
R2(config-if)#
R2(config-if)#              ip address 192.168.23.2  255.255.255.0
R2(config-if)#
R2(config-if)#              no shutdown
R2(config-if)#
R2(config-if)#              

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/1
R3(config-if)#
R3(config-if)#              ip address 192.168.34.4  255.255.255.0
R3(config-if)#
R3(config-if)#              no shutdown
R3(config-if)#
R3(config-if)#              

R4#
R4#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#              interface Ethernet 1/0
R4(config-if)#
R4(config-if)#              ip address 192.168.12.1  255.255.255.0
R4(config-if)#
R4(config-if)#              no shutdown
R4(config-if)#
R4(config-if)#              

R5#
R5#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#              interface Ethernet 1/0
R5(config-if)#
R5(config-if)#              ip address 192.168.45.6  255.255.255.0
R5(config-if)#
R5(config-if)#              no shutdown
R5(config-if)#
R5(config-if)#              
ifconfig eth0 192.168.80.20
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 
ip 192.168.70.20 255.255.255.0 192.168.70.10
Checking for duplicate address...
PC1 : 192.168.70.20 255.255.255.0 gateway 192.168.70.10

PC-1&gt; 

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/1
R2(config-if)#
R2(config-if)#              ip address 192.168.12.2  255.255.255.0
R2(config-if)#
R2(config-if)#              no shutdown
R2(config-if)#
R2(config-if)#              

R4#
R4#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#              interface Ethernet 1/1
R4(config-if)#
R4(config-if)#              ip address 192.168.70.10  255.255.255.0
R4(config-if)#
R4(config-if)#              no shutdown
R4(config-if)#
R4(config-if)#              
Configured  IP Address for R4
R1#
R1#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#              interface Ethernet 1/1
R1(config-if)#
R1(config-if)#              ip address 192.168.34.3  255.255.255.0
R1(config-if)#
R1(config-if)#              no shutdown
R1(config-if)#
R1(config-if)#              

R5#
R5#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#              interface Ethernet 1/1
R5(config-if)#
R5(config-if)#              ip address 192.168.80.10  255.255.255.0
R5(config-if)#
R5(config-if)#              no shutdown
R5(config-if)#
R5(config-if)#              
Configured  IP Address for R1Waiting thread #ConfigureRouter_R2

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/0
R3(config-if)#
R3(config-if)#              ip address 192.168.45.4  255.255.255.0
R3(config-if)#
R3(config-if)#              no shutdown
R3(config-if)#
R3(config-if)#              
Configured  IP Address for R5route add default gw 192.168.80.10
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# [K
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/2
R2(config-if)#
R2(config-if)#              ip address 192.168.50.2  255.255.255.0
R2(config-if)#
R2(config-if)#              no shutdown
R2(config-if)#
R2(config-if)#              
Configured  IP Address for R2Waiting thread #ConfigureRouter_R3

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/2
R3(config-if)#
R3(config-if)#              ip address 192.168.50.4  255.255.255.0
R3(config-if)#
R3(config-if)#              no shutdown
R3(config-if)#
R3(config-if)#              
Configured  IP Address for R3Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5
Waiting thread #ConfigureRouter_PC-1
Waiting thread #ConfigureRouter_Ubuntu</msg>
<status status="PASS" starttime="20181213 12:36:40.947" endtime="20181213 12:37:07.675"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:37:07.675">${result} = True</msg>
<status status="PASS" starttime="20181213 12:36:40.946" endtime="20181213 12:37:07.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>IP address configuration failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:07.676" endtime="20181213 12:37:07.677"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>IP_Address configured on all Routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:07.677" endtime="20181213 12:37:07.678"></status>
</kw>
<status status="PASS" starttime="20181213 12:36:40.929" endtime="20181213 12:37:07.679"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:36:40.927" endtime="20181213 12:37:07.680"></status>
</test>
<test id="s1-t2" name="Configure loopback interface as per the topology">
<kw library="Resource" name="Set loopback interface">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Setting Loopback interface</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:07.685" endtime="20181213 12:37:07.686"></status>
</kw>
<kw name="${var} IN [ @{Devices} ]" type="for">
<kw name="${var} = R1" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:07.688">${load_device} = ['R1', 'set']</msg>
<status status="PASS" starttime="20181213 12:37:07.687" endtime="20181213 12:37:07.688"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:07.688" endtime="20181213 12:37:07.689"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:07.687" endtime="20181213 12:37:07.689"></status>
</kw>
<kw name="${var} = R2" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:07.690">${load_device} = ['R2', 'set']</msg>
<status status="PASS" starttime="20181213 12:37:07.690" endtime="20181213 12:37:07.690"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:07.691" endtime="20181213 12:37:07.692"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:07.689" endtime="20181213 12:37:07.692"></status>
</kw>
<kw name="${var} = R3" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:07.693">${load_device} = ['R3', 'set']</msg>
<status status="PASS" starttime="20181213 12:37:07.692" endtime="20181213 12:37:07.693"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:07.694" endtime="20181213 12:37:07.695"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:07.692" endtime="20181213 12:37:07.695"></status>
</kw>
<kw name="${var} = R4" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:07.696">${load_device} = ['R4', 'set']</msg>
<status status="PASS" starttime="20181213 12:37:07.695" endtime="20181213 12:37:07.696"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:07.696" endtime="20181213 12:37:07.696"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:07.695" endtime="20181213 12:37:07.696"></status>
</kw>
<kw name="${var} = R5" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:07.697">${load_device} = ['R5', 'set']</msg>
<status status="PASS" starttime="20181213 12:37:07.697" endtime="20181213 12:37:07.698"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:07.698" endtime="20181213 12:37:07.699"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:07.697" endtime="20181213 12:37:07.699"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:07.686" endtime="20181213 12:37:07.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start configure loopback</arg>
<arg>${load_devices_lo}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Loopback">
<arguments>
<arg>${load_devices_lo}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:37:16.779">Waiting thread #ConfigureRouter_R1

R1#
R1#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#          interface loopback0
R1(config-if)#
R1(config-if)#          ip address 1.1.1.1  255.255.255.255
R1(config-if)#
R1(config-if)#          end
R1#
R1#          

R2#
R2#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#          interface loopback0
R2(config-if)#
R2(config-if)#          ip address 2.2.2.2  255.255.255.255
R2(config-if)#
R2(config-if)#          end
R2#
R2#          

R3#
R3#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#          interface loopback0
R3(config-if)#
R3(config-if)#          ip address 3.3.3.3  255.255.255.255
R3(config-if)#
R3(config-if)#          end
R3#
R3#          
Waiting thread #ConfigureRouter_R2
Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4

R4#
R4#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#          interface loopback0
R4(config-if)#
R4(config-if)#          ip address 4.4.4.4  255.255.255.255
R4(config-if)#
R4(config-if)#          end
R4#
R4#          

R5#
R5#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#          interface loopback0
R5(config-if)#
R5(config-if)#          ip address 5.5.5.5  255.255.255.255
R5(config-if)#
R5(config-if)#          end
R5#
R5#          
Waiting thread #ConfigureRouter_R5</msg>
<status status="PASS" starttime="20181213 12:37:07.700" endtime="20181213 12:37:16.780"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:37:16.780">${result} = True</msg>
<status status="PASS" starttime="20181213 12:37:07.699" endtime="20181213 12:37:16.780"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Configuring Loopback IP failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:16.781" endtime="20181213 12:37:16.782"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Loopback_Address configured on all Routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:16.782" endtime="20181213 12:37:16.784"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:07.684" endtime="20181213 12:37:16.784"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:37:07.682" endtime="20181213 12:37:16.785"></status>
</test>
<test id="s1-t3" name="Configure OSPF within AS2 to advertise the connected networks">
<kw library="Resource" name="Enable OSPF in devices present in AS2 and set the ospf neighbors">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R1}</arg>
<arg>${Area1}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${load_device_R1}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:16.792">${load_device_R1} = ['R1', 1, ['192.168.23.0  0.0.0.255', '192.168.34.0  0.0.0.255', '1.1.1.0  0.0.0.255'], 0, 'enable']</msg>
<status status="PASS" starttime="20181213 12:37:16.791" endtime="20181213 12:37:16.792"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R2}</arg>
<arg>${Area1}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${load_device_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:16.795">${load_device_R2} = ['R2', 1, ['192.168.23.0  0.0.0.255', '192.168.50.0  0.0.0.255', '2.2.2.0  0.0.0.255'], 0, 'enable']</msg>
<status status="PASS" starttime="20181213 12:37:16.794" endtime="20181213 12:37:16.795"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R3}</arg>
<arg>${Area1}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${load_device_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:16.803">${load_device_R3} = ['R3', 1, ['192.168.34.0  0.0.0.255', '192.168.50.0  0.0.0.255', '3.3.3.0  0.0.0.255'], 0, 'enable']</msg>
<status status="PASS" starttime="20181213 12:37:16.796" endtime="20181213 12:37:16.803"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${load_device_R1}</arg>
<arg>${load_device_R2}</arg>
<arg>${load_device_R3}</arg>
</arguments>
<assign>
<var>${load_devices}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:16.805">${load_devices} = [['R1', 1, ['192.168.23.0  0.0.0.255', '192.168.34.0  0.0.0.255', '1.1.1.0  0.0.0.255'], 0, 'enable'], ['R2', 1, ['192.168.23.0  0.0.0.255', '192.168.50.0  0.0.0.255', '2.2.2.0  0.0.0.255'], 0, 'enabl...</msg>
<status status="PASS" starttime="20181213 12:37:16.803" endtime="20181213 12:37:16.805"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_configure_ospf</arg>
<arg>${load_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Ospf">
<arguments>
<arg>${load_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:37:44.564">Waiting thread #ConfigureRouter_R1

R2#
R2#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                                router ospf 1
R2(config-router)#
R2(config-router)#                                network 192.168.23.0  0.0.0$                     network 192.168.23.0  0.0.0.         255 area network 192.168.23.0  0.0.0.255 area 0         
R2(config-router)#
R2(config-router)#                                

R1#
R1#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                                router ospf 1
R1(config-router)#
R1(config-router)#                                network 192.168.23.0  0.0.0$                     network 192.168.23.0  0.0.0.         255 area network 192.168.23.0  0.0.0.255 area 0         
R1(config-router)#
R1(config-router)#                                

R3#
R3#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                                router ospf 1
R3(config-router)#
R3(config-router)#                                network 192.168.34.0  0.0.0$                     network 192.168.34.0  0.0.0.         255 area network 192.168.34.0  0.0.0.255 area 0         
R3(config-router)#
R3(config-router)#                                

R1#
R1#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                                router ospf 1
R1(config-router)#
R1(config-router)#                                network 192.168.34.0  0.0.0$                     network 192.168.34.0  0.0.0.         255 area network 192.168.34.0  0.0.0.255 area 0         
R1(config-router)#
R1(config-router)#                                

R2#
R2#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                                router ospf 1
R2(config-router)#
R2(config-router)#                                network 192.168.50.0  0.0.0$                     network 192.168.50.0  0.0.0.         255 area network 192.168.50.0  0.0.0.255 area 0         
R2(config-router)#
R2(config-router)#                                

R3#
R3#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                                router ospf 1
R3(config-router)#
R3(config-router)#                                network 192.168.50.0  0.0.0$                     network 192.168.50.0  0.0.0.         255 area network 192.168.50.0  0.0.0.255 area 0         
R3(config-router)#
R3(config-router)#                                

R2#
R2#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                                router ospf 1
R2(config-router)#
R2(config-router)#                                network 2.2.2.0  0.0.0.255 $                     network 2.2.2.0  0.0.0.255 a         rea 0
R2(config-router)#
R2(config-router)#                                

R1#
R1#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                                router ospf 1
R1(config-router)#
R1(config-router)#                                network 1.1.1.0  0.0.0.255 $                     network 1.1.1.0  0.0.0.255 a         rea 0
R1(config-router)#
R1(config-router)#                                
Waiting thread #ConfigureRouter_R2
Waiting thread #ConfigureRouter_R3

R3#
R3#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                                router ospf 1
R3(config-router)#
R3(config-router)#                                network 3.3.3.0  0.0.0.255 $                     network 3.3.3.0  0.0.0.255 a         rea 0
R3(config-router)#
R3(config-router)#</msg>
<status status="PASS" starttime="20181213 12:37:16.811" endtime="20181213 12:37:44.565"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:37:44.565">${result} = True</msg>
<status status="PASS" starttime="20181213 12:37:16.806" endtime="20181213 12:37:44.565"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Configuring ospf on Routers has failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:44.566" endtime="20181213 12:37:44.567"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>OSPF configured in Routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:37:44.568" endtime="20181213 12:37:44.571"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:16.789" endtime="20181213 12:37:44.571"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:37:16.787" endtime="20181213 12:37:44.575"></status>
</test>
<test id="s1-t4" name="Configure IBGP and source the BGP updates from the loopback0 interfaces">
<kw library="Resource" name="Enable IBGP and advertise the updates from the loopback interface">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${AS_id}</arg>
<arg>${R3_interface}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${ibgp_device_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:44.589">${ibgp_device_R2} = ['R2', 2, '3.3.3.3', 'enable']</msg>
<status status="PASS" starttime="20181213 12:37:44.588" endtime="20181213 12:37:44.595"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${AS_id}</arg>
<arg>${R2_interface}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${ibgp_device_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:44.597">${ibgp_device_R3} = ['R3', 2, '2.2.2.2', 'enable']</msg>
<status status="PASS" starttime="20181213 12:37:44.595" endtime="20181213 12:37:44.597"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ibgp_device_R2}</arg>
<arg>${ibgp_device_R3}</arg>
</arguments>
<assign>
<var>${ibgp_devices}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:37:44.604">${ibgp_devices} = [['R2', 2, '3.3.3.3', 'enable'], ['R3', 2, '2.2.2.2', 'enable']]</msg>
<status status="PASS" starttime="20181213 12:37:44.597" endtime="20181213 12:37:44.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start ibgp</arg>
<arg>${ibgp_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Ibgp">
<arguments>
<arg>${ibgp_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:38:02.721">Waiting thread #ConfigureRouter_R2

R2#
R2#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                        router bgp 2
R2(config-router)#
R2(config-router)#                        neighbor 3.3.3.3 remote-as 2
R2(config-router)#
R2(config-router)#                        neighbor 3.3.3.3 update-source loop$             neighbor 3.3.3.3 update-source loopb         ack 0
R2(config-router)#
R2(config-router)#                        
Waiting thread #ConfigureRouter_R3

R3#
R3#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                        router bgp 2
R3(config-router)#
R3(config-router)#                        neighbor 2.2.2.2 remote-as 2
R3(config-router)#
R3(config-router)#                        neighbor 2.2.2.2 update-source loop$             neighbor 2.2.2.2 update-source loopb         ack 0
R3(config-router)#
R3(config-router)#</msg>
<status status="PASS" starttime="20181213 12:37:44.605" endtime="20181213 12:38:02.722"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:38:02.722">${result} = True</msg>
<status status="PASS" starttime="20181213 12:37:44.605" endtime="20181213 12:38:02.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>IBGP configuration failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:38:02.723" endtime="20181213 12:38:02.724"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>IBGP configured on R2 and R3 routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:38:02.725" endtime="20181213 12:38:02.728"></status>
</kw>
<status status="PASS" starttime="20181213 12:37:44.587" endtime="20181213 12:38:02.729"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:37:44.578" endtime="20181213 12:38:02.729"></status>
</test>
<test id="s1-t5" name="Enable BGP Synchronisation">
<kw library="Resource" name="Enable synchronisation between border routers">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${AS_id}</arg>
</arguments>
<assign>
<var>${ibgp_sync_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:02.735">${ibgp_sync_R2} = ['R2', 2]</msg>
<status status="PASS" starttime="20181213 12:38:02.734" endtime="20181213 12:38:02.735"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${AS_id}</arg>
</arguments>
<assign>
<var>${ibgp_sync_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:02.737">${ibgp_sync_R3} = ['R3', 2]</msg>
<status status="PASS" starttime="20181213 12:38:02.736" endtime="20181213 12:38:02.737"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ibgp_sync_R2}</arg>
<arg>${ibgp_sync_R3}</arg>
</arguments>
<assign>
<var>${sync_enable}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:02.739">${sync_enable} = [['R2', 2], ['R3', 2]]</msg>
<status status="PASS" starttime="20181213 12:38:02.738" endtime="20181213 12:38:02.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>enable sync</arg>
<arg>${sync_enable}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Enable Sync">
<arguments>
<arg>${sync_enable}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:38:29.577">Waiting thread #ConfigureRouter_R2

R3#
R3#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                router bgp 2
R3(config-router)#
R3(config-router)#                synchronization
R3(config-router)#
R3(config-router)#                end
R3#
R3#                
R3#
R3#
*Dec 13 12:20:23.183: %SYS-5-CONFIG_I: Configured from console by console
R3#

R2#
R2#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                router bgp 2
R2(config-router)#
R2(config-router)#                synchronization
R2(config-router)#
R2(config-router)#                end
R2#
R2#                
R2#
R2#
*Dec 13 12:20:13.767: %SYS-5-CONFIG_I: Configured from console by console
R2#
Waiting thread #ConfigureRouter_R3</msg>
<status status="PASS" starttime="20181213 12:38:02.741" endtime="20181213 12:38:29.577"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:38:29.578">${result} = True</msg>
<status status="PASS" starttime="20181213 12:38:02.740" endtime="20181213 12:38:29.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>BGP synchronization failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:38:29.578" endtime="20181213 12:38:29.580"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Enabled BGP synchronization on R2 and R3 routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:38:29.580" endtime="20181213 12:38:29.584"></status>
</kw>
<status status="PASS" starttime="20181213 12:38:02.733" endtime="20181213 12:38:29.584"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:38:02.731" endtime="20181213 12:38:29.586"></status>
</test>
<test id="s1-t6" name="Configure EBGP and source the BGP updates from the loopback0 interfaces">
<kw library="Resource" name="Enable BGP and advertise networks connected outside the autonomous system">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${R2_einterface}</arg>
<arg>${R2_neighbor_AS_id}</arg>
<arg>enable</arg>
<arg>${R4_R2_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ebgp_device_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:29.592">${ebgp_device_R2} = ['R2', 2, '192.168.12.1', 1, 'enable', '192.168.12.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:38:29.591" endtime="20181213 12:38:29.592"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${R3_einterface}</arg>
<arg>${R3_neighbor_AS_id}</arg>
<arg>enable</arg>
<arg>${R3_R5_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ebgp_device_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:29.593">${ebgp_device_R3} = ['R3', 2, '192.168.45.6', 3, 'enable', '192.168.45.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:38:29.593" endtime="20181213 12:38:29.613"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${R4_AS_id}</arg>
<arg>${R4_einterface}</arg>
<arg>${R4_neighbor_AS_id}</arg>
<arg>enable</arg>
<arg>${R4_R2_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ebgp_device_R4}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:29.614">${ebgp_device_R4} = ['R4', 1, '192.168.12.2', 2, 'enable', '192.168.12.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:38:29.614" endtime="20181213 12:38:29.614"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${R5_AS_id}</arg>
<arg>${R5_einterface}</arg>
<arg>${R5_neighbor_AS_id}</arg>
<arg>enable</arg>
<arg>${R3_R5_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ebgp_device_R5}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:29.616">${ebgp_device_R5} = ['R5', 3, '192.168.45.4', 2, 'enable', '192.168.45.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:38:29.615" endtime="20181213 12:38:29.616"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ebgp_device_R2}</arg>
<arg>${ebgp_device_R3}</arg>
<arg>${ebgp_device_R4}</arg>
<arg>${ebgp_device_R5}</arg>
</arguments>
<assign>
<var>${ebgp_devices}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:29.618">${ebgp_devices} = [['R2', 2, '192.168.12.1', 1, 'enable', '192.168.12.0', '255.255.255.0'], ['R3', 2, '192.168.45.6', 3, 'enable', '192.168.45.0', '255.255.255.0'], ['R4', 1, '192.168.12.2', 2, 'enable', '192.168.12.0'...</msg>
<status status="PASS" starttime="20181213 12:38:29.616" endtime="20181213 12:38:29.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ebgp configure</arg>
<arg>${ebgp_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Ebgp Configure">
<arguments>
<arg>${ebgp_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:38:47.491">Waiting thread #ConfigureRouter_R2

R3#
R3#                            configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                            router bgp 2
R3(config-router)#
R3(config-router)#                            neighbor 192.168.45.6 remote-as$                 neighbor 192.168.45.6 remote-as          3
R3(config-router)#
R3(config-router)#                            network 192.168.45.0 mask 255.2$                 network 192.168.45.0 mask 255.25         5.255.0
R3(config-router)#
R3(config-router)#                            

R2#
R2#                            configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                            router bgp 2
R2(config-router)#
R2(config-router)#                            neighbor 192.168.12.1 remote-as$                 neighbor 192.168.12.1 remote-as          1
R2(config-router)#
R2(config-router)#                            network 192.168.12.0 mask 255.2$                 network 192.168.12.0 mask 255.25         5.255.0
R2(config-router)#
R2(config-router)#                            

R4#
R4#                            configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#                            router bgp 1
R4(config-router)#
R4(config-router)#                            neighbor 192.168.12.2 remote-as$                 neighbor 192.168.12.2 remote-as          2
R4(config-router)#
R4(config-router)#                            network 192.168.12.0 mask 255.2$                 network 192.168.12.0 mask 255.25         5.255.0
R4(config-router)#
R4(config-router)#                            
Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5

R5#
R5#                            configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#                            router bgp 3
R5(config-router)#
R5(config-router)#                            neighbor 192.168.45.4 remote-as$                 neighbor 192.168.45.4 remote-as          2
R5(config-router)#
R5(config-router)#                            network 192.168.45.0 mask 255.2$                 network 192.168.45.0 mask 255.25         5.255.0
R5(config-router)#
R5(config-router)#</msg>
<status status="PASS" starttime="20181213 12:38:29.620" endtime="20181213 12:38:47.492"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:38:47.492">${result} = True</msg>
<status status="PASS" starttime="20181213 12:38:29.619" endtime="20181213 12:38:47.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>EBGP configuration failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:38:47.492" endtime="20181213 12:38:47.493"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>EBGP configured on Routers R2,R3,R4 and R5</arg>
</arguments>
<status status="PASS" starttime="20181213 12:38:47.493" endtime="20181213 12:38:47.494"></status>
</kw>
<status status="PASS" starttime="20181213 12:38:29.590" endtime="20181213 12:38:47.495"></status>
</kw>
<kw library="Resource" name="Advertise loopback interface on AS1 and AS3">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${R4_AS_id}</arg>
<arg>${R4_interface}</arg>
<arg>${R4_mask}</arg>
</arguments>
<assign>
<var>${adv_R4}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:47.497">${adv_R4} = ['R4', 1, '4.4.4.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:38:47.496" endtime="20181213 12:38:47.497"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${R5_AS_id}</arg>
<arg>${R5_interface}</arg>
<arg>${R5_mask}</arg>
</arguments>
<assign>
<var>${adv_R5}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:47.498">${adv_R5} = ['R5', 3, '5.5.5.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:38:47.497" endtime="20181213 12:38:47.498"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${adv_R4}</arg>
<arg>${adv_R5}</arg>
</arguments>
<assign>
<var>${adv_devices}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:38:47.500">${adv_devices} = [['R4', 1, '4.4.4.0', '255.255.255.0'], ['R5', 3, '5.5.5.0', '255.255.255.0']]</msg>
<status status="PASS" starttime="20181213 12:38:47.498" endtime="20181213 12:38:47.500"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>advertise loopback</arg>
<arg>${adv_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Advertise Loopback">
<arguments>
<arg>${adv_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:39:10.246">Waiting thread #ConfigureRouter_R4

R4#
R4#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#                router bgp 1
R4(config-router)#
R4(config-router)#                network 4.4.4.0 mask 255.255.255.0
R4(config-router)#
R4(config-router)#                end
R4#
R4#                
R4#
R4#
*Dec 13 12:21:03.563: %SYS-5-CONFIG_I: Configured from console by console
R4#
Waiting thread #ConfigureRouter_R5

R5#
R5#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#                router bgp 3
R5(config-router)#
R5(config-router)#                network 5.5.5.0 mask 255.255.255.0
R5(config-router)#
R5(config-router)#                end
R5#
R5#                
R5#
R5#
*Dec 13 12:20:53.655: %SYS-5-CONFIG_I: Configured from console by console
R5#</msg>
<status status="PASS" starttime="20181213 12:38:47.501" endtime="20181213 12:39:10.247"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:39:10.247">${result} = True</msg>
<status status="PASS" starttime="20181213 12:38:47.500" endtime="20181213 12:39:10.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Advertising Loopback configuration failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:39:10.248" endtime="20181213 12:39:10.248"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Loopback interface is advertised to AS1 and AS3</arg>
</arguments>
<status status="PASS" starttime="20181213 12:39:10.249" endtime="20181213 12:39:10.250"></status>
</kw>
<status status="PASS" starttime="20181213 12:38:47.495" endtime="20181213 12:39:10.250"></status>
</kw>
<kw library="Resource" name="Establish route between R2 and R3">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${R3_lointerface}</arg>
</arguments>
<assign>
<var>${route_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:10.252">${route_R2} = ['R2', 2, '3.3.3.3']</msg>
<status status="PASS" starttime="20181213 12:39:10.252" endtime="20181213 12:39:10.253"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${R2_lointerface}</arg>
</arguments>
<assign>
<var>${route_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:10.255">${route_R3} = ['R3', 2, '2.2.2.2']</msg>
<status status="PASS" starttime="20181213 12:39:10.254" endtime="20181213 12:39:10.255"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${route_R2}</arg>
<arg>${route_R3}</arg>
</arguments>
<assign>
<var>${routes}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:10.256">${routes} = [['R2', 2, '3.3.3.3'], ['R3', 2, '2.2.2.2']]</msg>
<status status="PASS" starttime="20181213 12:39:10.256" endtime="20181213 12:39:10.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>establish route</arg>
<arg>${routes}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Establish Route">
<arguments>
<arg>${routes}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:39:32.854">Waiting thread #ConfigureRouter_R2

R3#
R3#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                router bgp 2
R3(config-router)#
R3(config-router)#                neighbor 2.2.2.2 next-hop-self
R3(config-router)#
R3(config-router)#                end
R3#
R3#                
R3#
R3#
*Dec 13 12:21:26.515: %SYS-5-CONFIG_I: Configured from console by console
R3#

R2#
R2#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                router bgp 2
R2(config-router)#
R2(config-router)#                neighbor 3.3.3.3 next-hop-self
R2(config-router)#
R2(config-router)#                end
R2#
R2#                
R2#
R2#
*Dec 13 12:21:17.027: %SYS-5-CONFIG_I: Configured from console by console
R2#
Waiting thread #ConfigureRouter_R3</msg>
<status status="PASS" starttime="20181213 12:39:10.258" endtime="20181213 12:39:32.855"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:39:32.855">${result} = True</msg>
<status status="PASS" starttime="20181213 12:39:10.257" endtime="20181213 12:39:32.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Establishment of route between R2 and R3 failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:39:32.855" endtime="20181213 12:39:32.856"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Established route between R2 and R3</arg>
</arguments>
<status status="PASS" starttime="20181213 12:39:32.856" endtime="20181213 12:39:32.857"></status>
</kw>
<status status="PASS" starttime="20181213 12:39:10.251" endtime="20181213 12:39:32.858"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:38:29.588" endtime="20181213 12:39:32.858"></status>
</test>
<test id="s1-t7" name="Redistribute routes from OSPF into BGP">
<kw library="Resource" name="Redistribute routes from OSPF into BGP">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Redistributing routes from OSPF into BGP</arg>
</arguments>
<status status="PASS" starttime="20181213 12:39:32.861" endtime="20181213 12:39:32.862"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${Process_id}</arg>
</arguments>
<assign>
<var>${redistribution_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:32.864">${redistribution_R2} = ['R2', 2, 1]</msg>
<status status="PASS" starttime="20181213 12:39:32.863" endtime="20181213 12:39:32.864"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${Process_id}</arg>
</arguments>
<assign>
<var>${redistribution_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:32.865">${redistribution_R3} = ['R3', 2, 1]</msg>
<status status="PASS" starttime="20181213 12:39:32.864" endtime="20181213 12:39:32.865"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${redistribution_R2}</arg>
<arg>${redistribution_R3}</arg>
</arguments>
<assign>
<var>${redistribute_ospf}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:32.867">${redistribute_ospf} = [['R2', 2, 1], ['R3', 2, 1]]</msg>
<status status="PASS" starttime="20181213 12:39:32.866" endtime="20181213 12:39:32.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>redistribute ospf</arg>
<arg>${redistribute_ospf}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Redistribute Ospf">
<arguments>
<arg>${redistribute_ospf}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:39:50.722">Waiting thread #ConfigureRouter_R2

R2#
R2#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                router bgp 2
R2(config-router)#
R2(config-router)#                redistribute ospf 1
R2(config-router)#
R2(config-router)#                

R3#
R3#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                router bgp 2
R3(config-router)#
R3(config-router)#                redistribute ospf 1
R3(config-router)#
R3(config-router)#                
Waiting thread #ConfigureRouter_R3</msg>
<status status="PASS" starttime="20181213 12:39:32.868" endtime="20181213 12:39:50.723"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:39:50.723">${result} = True</msg>
<status status="PASS" starttime="20181213 12:39:32.867" endtime="20181213 12:39:50.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Redistribution of routes from OSPF into BGP failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:39:50.723" endtime="20181213 12:39:50.724"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Redistributed routes from OSPF into BGP</arg>
</arguments>
<status status="PASS" starttime="20181213 12:39:50.725" endtime="20181213 12:39:50.726"></status>
</kw>
<status status="PASS" starttime="20181213 12:39:32.861" endtime="20181213 12:39:50.726"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:39:32.859" endtime="20181213 12:39:50.727"></status>
</test>
<test id="s1-t8" name="Redistribute connnected routes into BGP">
<kw library="Resource" name="Redistribute connnected routes into BGP">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Redistributing connected routes into BGP</arg>
</arguments>
<status status="PASS" starttime="20181213 12:39:50.734" endtime="20181213 12:39:50.736"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${R4_AS_id}</arg>
</arguments>
<assign>
<var>${redistribution_R4}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:50.737">${redistribution_R4} = ['R4', 1]</msg>
<status status="PASS" starttime="20181213 12:39:50.736" endtime="20181213 12:39:50.737"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${R5_AS_id}</arg>
</arguments>
<assign>
<var>${redistribution_R5}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:50.738">${redistribution_R5} = ['R5', 3]</msg>
<status status="PASS" starttime="20181213 12:39:50.737" endtime="20181213 12:39:50.738"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${redistribution_R4}</arg>
<arg>${redistribution_R5}</arg>
</arguments>
<assign>
<var>${connected}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:39:50.739">${connected} = [['R4', 1], ['R5', 3]]</msg>
<status status="PASS" starttime="20181213 12:39:50.739" endtime="20181213 12:39:50.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>redistribute connected</arg>
<arg>${connected}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Redistribute Connected">
<arguments>
<arg>${connected}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:40:13.467">Waiting thread #ConfigureRouter_R4

R4#
R4#                                  configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#                                  router bgp 1
R4(config-router)#
R4(config-router)#                                  redistribute connected
R4(config-router)#
R4(config-router)#                                  end
R4#
R4#                                  
R4#
R4#
*Dec 13 12:22:06.791: %SYS-5-CONFIG_I: Configured from console by console
R4#

R5#
R5#                                  configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#                                  router bgp 3
R5(config-router)#
R5(config-router)#                                  redistribute connected
R5(config-router)#
R5(config-router)#                                  end
R5#
R5#                                  
R5#
R5#
*Dec 13 12:21:56.891: %SYS-5-CONFIG_I: Configured from console by console
R5#
Waiting thread #ConfigureRouter_R5</msg>
<status status="PASS" starttime="20181213 12:39:50.740" endtime="20181213 12:40:13.467"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:40:13.468">${result} = True</msg>
<status status="PASS" starttime="20181213 12:39:50.739" endtime="20181213 12:40:13.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Redistribution of connected routes failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:13.468" endtime="20181213 12:40:13.469"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Redistributed connnected routes into BGP</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:13.469" endtime="20181213 12:40:13.471"></status>
</kw>
<status status="PASS" starttime="20181213 12:39:50.733" endtime="20181213 12:40:13.471"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:39:50.732" endtime="20181213 12:40:13.472"></status>
</test>
<test id="s1-t9" name="Check if ip address is set and interface is up">
<kw library="Resource" name="Check if ip address is set and interface is up">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Checking if IP address is set and interface is up</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:13.484" endtime="20181213 12:40:13.490"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R1}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:13.492">${ip_set_R1} = ['R1', 'show interfaces description']</msg>
<status status="PASS" starttime="20181213 12:40:13.490" endtime="20181213 12:40:13.493"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:13.494">${ip_set_R2} = ['R2', 'show interfaces description']</msg>
<status status="PASS" starttime="20181213 12:40:13.493" endtime="20181213 12:40:13.494"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:13.494">${ip_set_R3} = ['R3', 'show interfaces description']</msg>
<status status="PASS" starttime="20181213 12:40:13.494" endtime="20181213 12:40:13.495"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R4}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:13.495">${ip_set_R4} = ['R4', 'show interfaces description']</msg>
<status status="PASS" starttime="20181213 12:40:13.495" endtime="20181213 12:40:13.495"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R5}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:13.496">${ip_set_R5} = ['R5', 'show interfaces description']</msg>
<status status="PASS" starttime="20181213 12:40:13.496" endtime="20181213 12:40:13.496"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ip_set_R1}</arg>
<arg>${ip_set_R2}</arg>
<arg>${ip_set_R3}</arg>
<arg>${ip_set_R4}</arg>
<arg>${ip_set_R4}</arg>
</arguments>
<assign>
<var>${show_ip_interface}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:13.501">${show_ip_interface} = [['R1', 'show interfaces description'], ['R2', 'show interfaces description'], ['R3', 'show interfaces description'], ['R4', 'show interfaces description'], ['R4', 'show interfaces description']]</msg>
<status status="PASS" starttime="20181213 12:40:13.497" endtime="20181213 12:40:13.501"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>show ip interface</arg>
<arg>${show_ip_interface}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Show Ip Interface">
<arguments>
<arg>${show_ip_interface}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:40:36.111">Waiting thread #ConfigureRouter_R1

R1#
R1#        show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          admin down     down     
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R1#       
R1#
R1#

R2#
R2#        show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          up             up       
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R2#       
R2#
R2#

R3#
R3#        show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          up             up       
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R3#       
R3#
R3#

R4#
R4#
R4#
R4#        show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          admin down     down     
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R4#       show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          admin down     down     
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R4#       
R4#
R4#        
R4#
R4#

R4#
R4#
R4#
R4#        show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          admin down     down     
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R4#       show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          admin down     down     
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R4#       
R4#
R4#        
R4#
R4#
Waiting thread #ConfigureRouter_R2
Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R4</msg>
<status status="PASS" starttime="20181213 12:40:13.502" endtime="20181213 12:40:36.112"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:40:36.112">${result} = True</msg>
<status status="PASS" starttime="20181213 12:40:13.501" endtime="20181213 12:40:36.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>IP address not set or interface not up in</arg>
<arg>${ELEMENT}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:36.113" endtime="20181213 12:40:36.113"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:13.483" endtime="20181213 12:40:36.113"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:40:13.482" endtime="20181213 12:40:36.114"></status>
</test>
<test id="s1-t10" name="Check if OSPF neighbors are established">
<kw library="Resource" name="Check if OSPF neighbors are established">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Checking if OSPF neighbors are established</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:36.118" endtime="20181213 12:40:36.119"></status>
</kw>
<kw name="${ELEMENT} IN RANGE [ 0 | 3 ]" type="for">
<kw name="${ELEMENT} = 0" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip ospf neighbor</arg>
</arguments>
<assign>
<var>${neighbor}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:36.121">${neighbor} = ['R1', 'show ip ospf neighbor']</msg>
<status status="PASS" starttime="20181213 12:40:36.120" endtime="20181213 12:40:36.121"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ospf_neighbor}</arg>
<arg>${neighbor}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:36.121" endtime="20181213 12:40:36.123"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:36.119" endtime="20181213 12:40:36.123"></status>
</kw>
<kw name="${ELEMENT} = 1" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip ospf neighbor</arg>
</arguments>
<assign>
<var>${neighbor}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:36.124">${neighbor} = ['R2', 'show ip ospf neighbor']</msg>
<status status="PASS" starttime="20181213 12:40:36.124" endtime="20181213 12:40:36.124"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ospf_neighbor}</arg>
<arg>${neighbor}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:36.125" endtime="20181213 12:40:36.141"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:36.123" endtime="20181213 12:40:36.141"></status>
</kw>
<kw name="${ELEMENT} = 2" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip ospf neighbor</arg>
</arguments>
<assign>
<var>${neighbor}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:36.145">${neighbor} = ['R3', 'show ip ospf neighbor']</msg>
<status status="PASS" starttime="20181213 12:40:36.144" endtime="20181213 12:40:36.145"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ospf_neighbor}</arg>
<arg>${neighbor}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:36.146" endtime="20181213 12:40:36.147"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:36.141" endtime="20181213 12:40:36.147"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:36.119" endtime="20181213 12:40:36.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>show ospf neighbor</arg>
<arg>${ospf_neighbor}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Show Ospf Neighbor">
<arguments>
<arg>${ospf_neighbor}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:40:58.764">Waiting thread #ConfigureRouter_R1

R1#
R1#        show ip ospf neighbor

Neighbor ID     Pri   State           Dead Time   Address         Interface
3.3.3.3           1   FULL/DR         00:00:33    192.168.34.4    Ethernet1/1
2.2.2.2           1   FULL/DR         00:00:34    192.168.23.2    Ethernet1/0
R1#
R1#        
R1#
R1#

R3#
R3#        show ip ospf neighbor

Neighbor ID     Pri   State           Dead Time   Address         Interface
2.2.2.2           1   FULL/BDR        00:00:32    192.168.50.2    Ethernet1/2
1.1.1.1           1   FULL/BDR        00:00:32    192.168.34.3    Ethernet1/1
R3#
R3#        
R3#
R3#
Waiting thread #ConfigureRouter_R2

R2#
R2#        show ip ospf neighbor

Neighbor ID     Pri   State           Dead Time   Address         Interface
3.3.3.3           1   FULL/DR         00:00:33    192.168.50.4    Ethernet1/2
1.1.1.1           1   FULL/BDR        00:00:33    192.168.23.3    Ethernet1/0
R2#
R2#        
R2#
R2#
Waiting thread #ConfigureRouter_R3</msg>
<status status="PASS" starttime="20181213 12:40:36.148" endtime="20181213 12:40:58.764"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:40:58.764">${result} = True</msg>
<status status="PASS" starttime="20181213 12:40:36.147" endtime="20181213 12:40:58.764"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>OSPF neighbors are not established in the routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:58.765" endtime="20181213 12:40:58.766"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:36.117" endtime="20181213 12:40:58.767"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:40:36.116" endtime="20181213 12:40:58.767"></status>
</test>
<test id="s1-t11" name="Check if BGP sessions are established">
<kw library="Resource" name="Check if BGP sessions are established">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Checking if all BGP sessions are established</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:58.779" endtime="20181213 12:40:58.781"></status>
</kw>
<kw name="${ELEMENT} IN RANGE [ 1 | 5 ]" type="for">
<kw name="${ELEMENT} = 1" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip bgp summary</arg>
</arguments>
<assign>
<var>${bgp}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:58.784">${bgp} = ['R2', 'show ip bgp summary']</msg>
<status status="PASS" starttime="20181213 12:40:58.782" endtime="20181213 12:40:58.784"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${bgp_summary}</arg>
<arg>${bgp}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:58.785" endtime="20181213 12:40:58.786"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:58.781" endtime="20181213 12:40:58.786"></status>
</kw>
<kw name="${ELEMENT} = 2" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip bgp summary</arg>
</arguments>
<assign>
<var>${bgp}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:58.789">${bgp} = ['R3', 'show ip bgp summary']</msg>
<status status="PASS" starttime="20181213 12:40:58.787" endtime="20181213 12:40:58.789"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${bgp_summary}</arg>
<arg>${bgp}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:58.789" endtime="20181213 12:40:58.790"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:58.786" endtime="20181213 12:40:58.791"></status>
</kw>
<kw name="${ELEMENT} = 3" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip bgp summary</arg>
</arguments>
<assign>
<var>${bgp}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:58.796">${bgp} = ['R4', 'show ip bgp summary']</msg>
<status status="PASS" starttime="20181213 12:40:58.792" endtime="20181213 12:40:58.796"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${bgp_summary}</arg>
<arg>${bgp}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:58.797" endtime="20181213 12:40:58.798"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:58.791" endtime="20181213 12:40:58.798"></status>
</kw>
<kw name="${ELEMENT} = 4" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip bgp summary</arg>
</arguments>
<assign>
<var>${bgp}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:40:58.803">${bgp} = ['R5', 'show ip bgp summary']</msg>
<status status="PASS" starttime="20181213 12:40:58.799" endtime="20181213 12:40:58.806"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${bgp_summary}</arg>
<arg>${bgp}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:40:58.806" endtime="20181213 12:40:58.807"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:58.798" endtime="20181213 12:40:58.807"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:58.781" endtime="20181213 12:40:58.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>show bgp summary</arg>
<arg>${bgp_summary}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Show Bgp Summary">
<arguments>
<arg>${bgp_summary}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:41:21.401">Waiting thread #ConfigureRouter_R2

R2#
R2#              show ip bgp summary
BGP router identifier 2.2.2.2, local AS number 2
BGP table version is 17, main routing table version 17
12 network entries using 1404 bytes of memory
19 path entries using 988 bytes of memory
12/7 BGP path/bestpath attribute entries using 1488 bytes of memory
2 BGP AS-PATH entries using 48 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 3928 total bytes of memory
BGP activity 12/0 prefixes, 19/0 paths, scan interval 60 secs

Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
3.3.3.3         4     2      11      11       17    0    0 00:02:43        9
192.168.12.1    4     1       8      12       17    0    0 00:02:02        3
R2#
R2#              
R2#
R2#

R5#
R5#              show ip bgp summary
BGP router identifier 5.5.5.5, local AS number 3
BGP table version is 13, main routing table version 13
12 network entries using 1404 bytes of memory
13 path entries using 676 bytes of memory
9/7 BGP path/bestpath attribute entries using 1116 bytes of memory
2 BGP AS-PATH entries using 48 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 3244 total bytes of memory
BGP activity 12/0 prefixes, 13/0 paths, scan interval 60 secs

Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
192.168.45.4    4     2      11       7       13    0    0 00:02:00       10
R5#
R5#              
R5#
R5#

R4#
R4#              show ip bgp summary
BGP router identifier 4.4.4.4, local AS number 1
BGP table version is 13, main routing table version 13
12 network entries using 1404 bytes of memory
13 path entries using 676 bytes of memory
9/7 BGP path/bestpath attribute entries using 1116 bytes of memory
2 BGP AS-PATH entries using 48 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 3244 total bytes of memory
BGP activity 12/0 prefixes, 13/0 paths, scan interval 60 secs

Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
192.168.12.2    4     2      12       8       13    0    0 00:02:02       10
R4#
R4#              
R4#
R4#
Waiting thread #ConfigureRouter_R3

R3#
R3#              show ip bgp summary
BGP router identifier 3.3.3.3, local AS number 2
BGP table version is 17, main routing table version 17
12 network entries using 1404 bytes of memory
19 path entries using 988 bytes of memory
12/7 BGP path/bestpath attribute entries using 1488 bytes of memory
2 BGP AS-PATH entries using 48 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 3928 total bytes of memory
BGP activity 12/0 prefixes, 19/0 paths, scan interval 60 secs

Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
2.2.2.2         4     2      11      11       17    0    0 00:02:43        9
192.168.45.6    4     3       7      11       17    0    0 00:02:00        3
R3#
R3#              
R3#
R3#
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5</msg>
<status status="PASS" starttime="20181213 12:40:58.808" endtime="20181213 12:41:21.402"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:41:21.402">${result} = True</msg>
<status status="PASS" starttime="20181213 12:40:58.808" endtime="20181213 12:41:21.402"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>BGP sessions are not established in the routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:41:21.403" endtime="20181213 12:41:21.406"></status>
</kw>
<status status="PASS" starttime="20181213 12:40:58.776" endtime="20181213 12:41:21.406"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:40:58.770" endtime="20181213 12:41:21.408"></status>
</test>
<test id="s1-t12" name="Ensure that different autonomous systems can communicate with each other">
<kw library="Resource" name="Ensure that different autonomous systems can communicate with each other">
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Autonomous system communication validated</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:41:21.413">Autonomous system communication validated</msg>
<status status="PASS" starttime="20181213 12:41:21.413" endtime="20181213 12:41:21.414"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Verify Ping operation from PC-1 to Ubuntu</arg>
</arguments>
<status status="PASS" starttime="20181213 12:41:21.414" endtime="20181213 12:41:21.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ping router</arg>
<arg>PC-1</arg>
<arg>ping</arg>
<arg>${Host2_IP}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="operational_ph" name="Ping Router">
<arguments>
<arg>PC-1</arg>
<arg>ping</arg>
<arg>${Host2_IP}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:41:36.701">ping
ping 192.168.80.20 -c 5 
192.168.80.20 icmp_seq=1 timeout
84 bytes from 192.168.80.20 icmp_seq=2 ttl=60 time=70.534 ms
84 bytes from 192.168.80.20 icmp_seq=3 ttl=60 time=62.551 ms
84 bytes from 192.168.80.20 icmp_seq=4 ttl=60 time=47.986 ms</msg>
<status status="PASS" starttime="20181213 12:41:21.417" endtime="20181213 12:41:36.702"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:41:36.702">${result} = True</msg>
<status status="PASS" starttime="20181213 12:41:21.416" endtime="20181213 12:41:36.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to reach ONL from PC-1 to Ubuntu</arg>
</arguments>
<status status="PASS" starttime="20181213 12:41:36.702" endtime="20181213 12:41:36.703"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Verify Ping operation from Ubuntu to PC-1</arg>
</arguments>
<status status="PASS" starttime="20181213 12:41:36.704" endtime="20181213 12:41:36.705"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ping router</arg>
<arg>Ubuntu</arg>
<arg>ping</arg>
<arg>${Host1_IP}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="operational_ph" name="Ping Router">
<arguments>
<arg>Ubuntu</arg>
<arg>ping</arg>
<arg>${Host1_IP}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:42:31.859">ping</msg>
<status status="PASS" starttime="20181213 12:41:36.707" endtime="20181213 12:42:31.859"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:42:31.860">${result} = None</msg>
<status status="PASS" starttime="20181213 12:41:36.705" endtime="20181213 12:42:31.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to reach VPCS from Ubuntu to PC-1</arg>
</arguments>
<status status="PASS" starttime="20181213 12:42:31.860" endtime="20181213 12:42:31.862"></status>
</kw>
<status status="PASS" starttime="20181213 12:41:21.412" endtime="20181213 12:42:31.862"></status>
</kw>
<status critical="yes" status="PASS" starttime="20181213 12:41:21.410" endtime="20181213 12:42:31.863"></status>
</test>
<kw library="Resource" name="Teardown Actions" type="teardown">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Teardown Actions done here</arg>
</arguments>
<status status="PASS" starttime="20181213 12:42:31.873" endtime="20181213 12:42:31.874"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Unconfiguring IP_Address</arg>
</arguments>
<status status="PASS" starttime="20181213 12:42:31.874" endtime="20181213 12:42:31.875"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Links_of_R1}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R1}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:42:31.876">${ip_addr_R1} = ['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'unconfigure']</msg>
<status status="PASS" starttime="20181213 12:42:31.876" endtime="20181213 12:42:31.877"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${Links_of_R2}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:42:31.878">${ip_addr_R2} = ['R2', ['Link_R1_R2_1', 'Link_R2_R4_1', 'Link_R2_R3_1'], 'unconfigure']</msg>
<status status="PASS" starttime="20181213 12:42:31.877" endtime="20181213 12:42:31.878"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${Links_of_R3}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:42:31.879">${ip_addr_R3} = ['R3', ['Link_R1_R3_1', 'Link_R3_R5_1', 'Link_R2_R3_1'], 'unconfigure']</msg>
<status status="PASS" starttime="20181213 12:42:31.878" endtime="20181213 12:42:31.879"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${Links_of_R4}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R4}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:42:31.881">${ip_addr_R4} = ['R4', ['Link_R2_R4_1', 'Link_R4_PC-1_1'], 'unconfigure']</msg>
<status status="PASS" starttime="20181213 12:42:31.880" endtime="20181213 12:42:31.881"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${Links_of_R5}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R5}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:42:31.885">${ip_addr_R5} = ['R5', ['Link_R3_R5_1', 'Link_R5_PC-2_1'], 'unconfigure']</msg>
<status status="PASS" starttime="20181213 12:42:31.884" endtime="20181213 12:42:31.885"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>PC-1</arg>
<arg>unconfigure</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ip_addr_PC1}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:42:31.886">${ip_addr_PC1} = ['PC-1', 'unconfigure', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:42:31.885" endtime="20181213 12:42:31.886"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>Ubuntu</arg>
<arg>unconfigure</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ip_addr_PC2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:42:31.888">${ip_addr_PC2} = ['Ubuntu', 'unconfigure', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:42:31.887" endtime="20181213 12:42:31.888"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ip_addr_R1}</arg>
<arg>${ip_addr_R2}</arg>
<arg>${ip_addr_R3}</arg>
<arg>${ip_addr_R4}</arg>
<arg>${ip_addr_R5}</arg>
<arg>${ip_addr_PC1}</arg>
<arg>${ip_addr_PC2}</arg>
</arguments>
<assign>
<var>${unconfig_ip}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:42:31.890">${unconfig_ip} = [['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'unconfigure'], ['R2', ['Link_R1_R2_1', 'Link_R2_R4_1', 'Link_R2_R3_1'], 'unconfigure'], ['R3', ['Link_R1_R3_1', 'Link_R3_R5_1', 'Link_R2_R3_1'], 'unconfigure...</msg>
<status status="PASS" starttime="20181213 12:42:31.888" endtime="20181213 12:42:31.890"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start configure</arg>
<arg>${unconfig_ip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure">
<arguments>
<arg>${unconfig_ip}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:43:00.481">Configuring IP address for R1Configuring IP address for R2Configuring IP address for R3Configuring IP address for R4Configuring IP address for R5Waiting thread #ConfigureRouter_R1

R1#
R1#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#              interface Ethernet 1/0
R1(config-if)#
R1(config-if)#              no ip address 192.168.23.3  255.255.255.0
R1(config-if)#
R1(config-if)#              shutdown
R1(config-if)#
R1(config-if)#              

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/1
R3(config-if)#
R3(config-if)#              no ip address 192.168.34.4  255.255.255.0
R3(config-if)#
R3(config-if)#              shutdown
R3(config-if)#
R3(config-if)#              

R4#
R4#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#              interface Ethernet 1/0
R4(config-if)#
R4(config-if)#              no ip address 192.168.12.1  255.255.255.0
R4(config-if)#
R4(config-if)#              shutdown
R4(config-if)#
R4(config-if)#              

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/0
R2(config-if)#
R2(config-if)#              no ip address 192.168.23.2  255.255.255.0
R2(config-if)#
R2(config-if)#              shutdown
R2(config-if)#
R2(config-if)#              

R5#
R5#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#              interface Ethernet 1/0
R5(config-if)#
R5(config-if)#              no ip address 192.168.45.6  255.255.255.0
R5(config-if)#
R5(config-if)#              shutdown
R5(config-if)#
R5(config-if)#              
ifconfig eth0 0
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 
clear ip
IPv4 address/mask, gateway, DNS, and DHCP cleared

PC-1&gt; 

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/0
R3(config-if)#
R3(config-if)#              no ip address 192.168.45.4  255.255.255.0
R3(config-if)#
R3(config-if)#              shutdown
R3(config-if)#
R3(config-if)#              

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/1
R2(config-if)#
R2(config-if)#              no ip address 192.168.12.2  255.255.255.0
R2(config-if)#
R2(config-if)#              shutdown
R2(config-if)#
R2(config-if)#              

R4#
R4#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#              interface Ethernet 1/1
R4(config-if)#
R4(config-if)#              no ip address 192.168.70.10  255.255.255.0
R4(config-if)#
R4(config-if)#              shutdown
R4(config-if)#
R4(config-if)#              
Configured  IP Address for R4
R1#
R1#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#              interface Ethernet 1/1
R1(config-if)#
R1(config-if)#              no ip address 192.168.34.3  255.255.255.0
R1(config-if)#
R1(config-if)#              shutdown
R1(config-if)#
R1(config-if)#              

R5#
R5#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#              interface Ethernet 1/1
R5(config-if)#
R5(config-if)#              no ip address 192.168.80.10  255.255.255.0
R5(config-if)#
R5(config-if)#              shutdown
R5(config-if)#
R5(config-if)#              
Configured  IP Address for R1Waiting thread #ConfigureRouter_R2
Configured  IP Address for R5
R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/2
R3(config-if)#
R3(config-if)#              no ip address 192.168.50.4  255.255.255.0
R3(config-if)#
R3(config-if)#              shutdown
R3(config-if)#
R3(config-if)#              
Configured  IP Address for R3
R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/2
R2(config-if)#
R2(config-if)#              no ip address 192.168.50.2  255.255.255.0
R2(config-if)#
R2(config-if)#              shutdown
R2(config-if)#
R2(config-if)#              
Configured  IP Address for R2Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5
Waiting thread #ConfigureRouter_PC-1
Waiting thread #ConfigureRouter_Ubuntu</msg>
<status status="PASS" starttime="20181213 12:42:31.891" endtime="20181213 12:43:00.482"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:43:00.483">${result} = True</msg>
<status status="PASS" starttime="20181213 12:42:31.890" endtime="20181213 12:43:00.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to clear IP address on the routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:00.484" endtime="20181213 12:43:00.485"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>IP_Address cleared on all Routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:00.485" endtime="20181213 12:43:00.489"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Unconfiguring Loopback interface</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:00.489" endtime="20181213 12:43:00.491"></status>
</kw>
<kw name="${var} IN [ @{Devices} ]" type="for">
<kw name="${var} = R1" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:00.492">${clear_lo} = ['R1', 'unset']</msg>
<status status="PASS" starttime="20181213 12:43:00.492" endtime="20181213 12:43:00.492"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:00.492" endtime="20181213 12:43:00.493"></status>
</kw>
<status status="PASS" starttime="20181213 12:43:00.491" endtime="20181213 12:43:00.493"></status>
</kw>
<kw name="${var} = R2" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:00.494">${clear_lo} = ['R2', 'unset']</msg>
<status status="PASS" starttime="20181213 12:43:00.493" endtime="20181213 12:43:00.494"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:00.494" endtime="20181213 12:43:00.495"></status>
</kw>
<status status="PASS" starttime="20181213 12:43:00.493" endtime="20181213 12:43:00.495"></status>
</kw>
<kw name="${var} = R3" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:00.496">${clear_lo} = ['R3', 'unset']</msg>
<status status="PASS" starttime="20181213 12:43:00.495" endtime="20181213 12:43:00.496"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:00.496" endtime="20181213 12:43:00.497"></status>
</kw>
<status status="PASS" starttime="20181213 12:43:00.495" endtime="20181213 12:43:00.497"></status>
</kw>
<kw name="${var} = R4" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:00.499">${clear_lo} = ['R4', 'unset']</msg>
<status status="PASS" starttime="20181213 12:43:00.497" endtime="20181213 12:43:00.499"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:00.500" endtime="20181213 12:43:00.500"></status>
</kw>
<status status="PASS" starttime="20181213 12:43:00.497" endtime="20181213 12:43:00.500"></status>
</kw>
<kw name="${var} = R5" type="foritem">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:00.501">${clear_lo} = ['R5', 'unset']</msg>
<status status="PASS" starttime="20181213 12:43:00.501" endtime="20181213 12:43:00.501"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:00.502" endtime="20181213 12:43:00.502"></status>
</kw>
<status status="PASS" starttime="20181213 12:43:00.501" endtime="20181213 12:43:00.502"></status>
</kw>
<status status="PASS" starttime="20181213 12:43:00.491" endtime="20181213 12:43:00.502"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start configure loopback</arg>
<arg>${clear_lo_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Loopback">
<arguments>
<arg>${clear_lo_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:43:09.827">Waiting thread #ConfigureRouter_R1

R1#
R1#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#          interface loopback0
R1(config-if)#
R1(config-if)#          ip address 127.0.0.1 255.255.255.255
Not a valid host address - 127.0.0.1
R1(config-if)#
R1(config-if)#          end
R1#
R1#          
Waiting thread #ConfigureRouter_R2

R4#
R4#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#          interface loopback0
R4(config-if)#
R4(config-if)#          ip address 127.0.0.1 255.255.255.255
Not a valid host address - 127.0.0.1
R4(config-if)#
R4(config-if)#          end
R4#
R4#          

R5#
R5#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#          interface loopback0
R5(config-if)#
R5(config-if)#          ip address 127.0.0.1 255.255.255.255
Not a valid host address - 127.0.0.1
R5(config-if)#
R5(config-if)#          end
R5#
R5#          

R2#
R2#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#          interface loopback0
R2(config-if)#
R2(config-if)#          ip address 127.0.0.1 255.255.255.255
Not a valid host address - 127.0.0.1
R2(config-if)#
R2(config-if)#          end
R2#
R2#          
Waiting thread #ConfigureRouter_R3

R3#
R3#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#          interface loopback0
R3(config-if)#
R3(config-if)#          ip address 127.0.0.1 255.255.255.255
Not a valid host address - 127.0.0.1
R3(config-if)#
R3(config-if)#          end
R3#
R3#          
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5</msg>
<status status="PASS" starttime="20181213 12:43:00.503" endtime="20181213 12:43:09.828"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:43:09.828">${result} = True</msg>
<status status="PASS" starttime="20181213 12:43:00.503" endtime="20181213 12:43:09.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to clear Loopback address on the interfaces</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:09.828" endtime="20181213 12:43:09.829"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Loopback_Address cleared on all Routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:09.830" endtime="20181213 12:43:09.831"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Clearing OSPF configuration</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:09.832" endtime="20181213 12:43:09.833"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R1}</arg>
<arg>${Area1}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${ospf_R1}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:09.834">${ospf_R1} = ['R1', 1, ['192.168.23.0  0.0.0.255', '192.168.34.0  0.0.0.255', '1.1.1.0  0.0.0.255'], 0, 'disable']</msg>
<status status="PASS" starttime="20181213 12:43:09.833" endtime="20181213 12:43:09.834"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R2}</arg>
<arg>${Area1}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${ospf_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:09.835">${ospf_R2} = ['R2', 1, ['192.168.23.0  0.0.0.255', '192.168.50.0  0.0.0.255', '2.2.2.0  0.0.0.255'], 0, 'disable']</msg>
<status status="PASS" starttime="20181213 12:43:09.834" endtime="20181213 12:43:09.836"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R3}</arg>
<arg>${Area1}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${ospf_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:09.839">${ospf_R3} = ['R3', 1, ['192.168.34.0  0.0.0.255', '192.168.50.0  0.0.0.255', '3.3.3.0  0.0.0.255'], 0, 'disable']</msg>
<status status="PASS" starttime="20181213 12:43:09.836" endtime="20181213 12:43:09.839"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ospf_R1}</arg>
<arg>${ospf_R2}</arg>
<arg>${ospf_R3}</arg>
</arguments>
<assign>
<var>${clear_ospf}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:09.840">${clear_ospf} = [['R1', 1, ['192.168.23.0  0.0.0.255', '192.168.34.0  0.0.0.255', '1.1.1.0  0.0.0.255'], 0, 'disable'], ['R2', 1, ['192.168.23.0  0.0.0.255', '192.168.50.0  0.0.0.255', '2.2.2.0  0.0.0.255'], 0, 'disa...</msg>
<status status="PASS" starttime="20181213 12:43:09.840" endtime="20181213 12:43:09.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_configure_ospf</arg>
<arg>${clear_ospf}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Ospf">
<arguments>
<arg>${clear_ospf}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:43:29.618">Waiting thread #ConfigureRouter_R1

R1#
R1#                    configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                    no router ospf 1
R1(config)#
R1(config)#                    end
R1#
R1#                    
R1#
R1#
*Dec 13 12:25:09.783: %SYS-5-CONFIG_I: Configured from console by console
R1#
Waiting thread #ConfigureRouter_R2

R2#
R2#                    configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                    no router ospf 1
R2(config)#
R2(config)#                    end
R2#
R2#                    
R2#
R2#
*Dec 13 12:25:11.639: %SYS-5-CONFIG_I: Configured from console by console
R2#
Waiting thread #ConfigureRouter_R3

R3#
R3#                    configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                    no router ospf 1
R3(config)#
R3(config)#                    end
R3#
R3#                    
R3#
R3#
*Dec 13 12:25:23.451: %SYS-5-CONFIG_I: Configured from console by console
R3#</msg>
<status status="PASS" starttime="20181213 12:43:09.842" endtime="20181213 12:43:29.618"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:43:29.618">${result} = True</msg>
<status status="PASS" starttime="20181213 12:43:09.841" endtime="20181213 12:43:29.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Clearing OSPF on Routers has failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:29.619" endtime="20181213 12:43:29.620"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>OSPF unconfigured in Routers</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:29.620" endtime="20181213 12:43:29.621"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Clearing BGP configuration</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:29.621" endtime="20181213 12:43:29.622"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${R2_einterface}</arg>
<arg>${R2_neighbor_AS_id}</arg>
<arg>disable</arg>
<arg>${R4_R2_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${clear_R2}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:29.624">${clear_R2} = ['R2', 2, '192.168.12.1', 1, 'disable', '192.168.12.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:43:29.623" endtime="20181213 12:43:29.624"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${R3_einterface}</arg>
<arg>${R3_neighbor_AS_id}</arg>
<arg>disable</arg>
<arg>${R3_R5_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${clear_R3}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:29.626">${clear_R3} = ['R3', 2, '192.168.45.6', 3, 'disable', '192.168.45.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:43:29.624" endtime="20181213 12:43:29.626"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${R4_AS_id}</arg>
<arg>${R4_einterface}</arg>
<arg>${R4_neighbor_AS_id}</arg>
<arg>disable</arg>
<arg>${R4_R2_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${clear_R4}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:29.647">${clear_R4} = ['R4', 1, '192.168.12.2', 2, 'disable', '192.168.12.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:43:29.645" endtime="20181213 12:43:29.647"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${R5_AS_id}</arg>
<arg>${R5_einterface}</arg>
<arg>${R5_neighbor_AS_id}</arg>
<arg>disable</arg>
<arg>${R3_R5_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${clear_R5}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:29.650">${clear_R5} = ['R5', 3, '192.168.45.4', 2, 'disable', '192.168.45.0', '255.255.255.0']</msg>
<status status="PASS" starttime="20181213 12:43:29.648" endtime="20181213 12:43:29.650"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${clear_R2}</arg>
<arg>${clear_R3}</arg>
<arg>${clear_R4}</arg>
<arg>${clear_R5}</arg>
</arguments>
<assign>
<var>${clear_ebgp}</var>
</assign>
<msg level="INFO" timestamp="20181213 12:43:29.651">${clear_ebgp} = [['R2', 2, '192.168.12.1', 1, 'disable', '192.168.12.0', '255.255.255.0'], ['R3', 2, '192.168.45.6', 3, 'disable', '192.168.45.0', '255.255.255.0'], ['R4', 1, '192.168.12.2', 2, 'disable', '192.168.12...</msg>
<status status="PASS" starttime="20181213 12:43:29.650" endtime="20181213 12:43:29.652"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ebgp configure</arg>
<arg>${clear_ebgp}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Ebgp Configure">
<arguments>
<arg>${clear_ebgp}</arg>
</arguments>
<msg level="INFO" timestamp="20181213 12:43:49.419">Waiting thread #ConfigureRouter_R2

R2#
R2#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                        no router bgp 2
R2(config)#
R2(config)#                        
Waiting thread #ConfigureRouter_R3

R3#
R3#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                        no router bgp 2
R3(config)#
R3(config)#                        

R4#
R4#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#                        no router bgp 1
R4(config)#
R4(config)#                        

R5#
R5#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#                        no router bgp 3
R5(config)#
R5(config)#                        
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5</msg>
<status status="PASS" starttime="20181213 12:43:29.653" endtime="20181213 12:43:49.419"></status>
</kw>
<msg level="INFO" timestamp="20181213 12:43:49.420">${result} = True</msg>
<status status="PASS" starttime="20181213 12:43:29.652" endtime="20181213 12:43:49.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Clearing BGP on Routers has failed</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:49.420" endtime="20181213 12:43:49.421"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BGP unconfigured on Routers R2,R3,R4 and R5</arg>
</arguments>
<status status="PASS" starttime="20181213 12:43:49.421" endtime="20181213 12:43:49.422"></status>
</kw>
<status status="PASS" starttime="20181213 12:42:31.872" endtime="20181213 12:43:49.423"></status>
</kw>
<doc>A test suite with tests for configuring BGP.
Topology:-
____________________________
| R1 AS2 |
| /  |
| /  |
| R2 R3 |
|_________|________|_________|
| |
______|__ ___|______
| AS1| | AS3|
| R4 | | R5 |
|_________| |__________|
Testplan Goals:-
1. Configure IP addresses as per the topology.
2. Each Router should have a loopback0 interface.
3. Configure OSPF within AS2 to advertise the loopback0 interfaces.
Don't advertise or run OSPF on the links interconnecting AS1 and AS3.
4. Configure IBGP between R2 and R3. Source the BGP updates from the loopback0 interfaces.
5. Enable BGP synchronisation.
6. Configure EBGP between R2 and R4.
7. Configure EBGP between R3 and R5.
8. Advertise the loopback0 interfaces on R4 and R5.
9. Ensure AS1 and AS3 can communicate with each other without removing the BGP synchronisation command.</doc>
<metadata>
<item name="Version">1.0
More Info For more information about Robot Framework see http://robotframework.org
Author Payal Jain
Date 19 Dec 2016
Executed At ${HOST}
Test Framework Robot Framework Python</item>
</metadata>
<status status="PASS" starttime="20181213 12:36:40.341" endtime="20181213 12:43:49.423"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="12">Critical Tests</stat>
<stat fail="0" pass="12">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat id="s1" fail="0" pass="12" name="BGP OSPF Test with GNS3">BGP OSPF Test with GNS3</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
