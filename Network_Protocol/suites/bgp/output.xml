<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20181217 15:37:59.217" generator="Robot 3.0.4 (Python 3.5.2 on linux)">
<suite id="s1" source="/opt/HAPPIEST_FRAMEWORK/Network_Protocol/suites/bgp/BGP_L3VPN.robot" name="BGP L3VPN">
<test id="s1-t1" name="Configure IP addresses as per the topology">
<kw library="Resource" name="Configure ip address">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Links_of_R1}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R1}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:37:59.434">${load_device_R1} = ['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'configure']</msg>
<status endtime="20181217 15:37:59.434" starttime="20181217 15:37:59.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${Links_of_R2}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:37:59.435">${load_device_R2} = ['R2', ['Link_R1_R2_1', 'Link_R2_R4_1', 'Link_R2_R3_1'], 'configure']</msg>
<status endtime="20181217 15:37:59.435" starttime="20181217 15:37:59.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${Links_of_R3}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:37:59.435">${load_device_R3} = ['R3', ['Link_R1_R3_1', 'Link_R3_R5_1', 'Link_R2_R3_1'], 'configure']</msg>
<status endtime="20181217 15:37:59.435" starttime="20181217 15:37:59.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${Links_of_R4}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R4}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:37:59.436">${load_device_R4} = ['R4', ['Link_R2_R4_1', 'Link_R4_PC-1_1'], 'configure']</msg>
<status endtime="20181217 15:37:59.436" starttime="20181217 15:37:59.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${Links_of_R5}</arg>
<arg>configure</arg>
</arguments>
<assign>
<var>${load_device_R5}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:37:59.436">${load_device_R5} = ['R5', ['Link_R3_R5_1', 'Link_R5_PC-2_1'], 'configure']</msg>
<status endtime="20181217 15:37:59.436" starttime="20181217 15:37:59.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>PC-1</arg>
<arg>configure</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${load_device_PC1}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:37:59.437">${load_device_PC1} = ['PC-1', 'configure', '255.255.255.0']</msg>
<status endtime="20181217 15:37:59.437" starttime="20181217 15:37:59.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>Ubuntu</arg>
<arg>configure</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${load_device_PC2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:37:59.437">${load_device_PC2} = ['Ubuntu', 'configure', '255.255.255.0']</msg>
<status endtime="20181217 15:37:59.437" starttime="20181217 15:37:59.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${load_device_R1}</arg>
<arg>${load_device_R2}</arg>
<arg>${load_device_R3}</arg>
<arg>${load_device_R4}</arg>
<arg>${load_device_R5}</arg>
<arg>${load_device_PC1}</arg>
<arg>${load_device_PC2}</arg>
</arguments>
<assign>
<var>${load_devices}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:37:59.438">${load_devices} = [['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'configure'], ['R2', ['Link_R1_R2_1', 'Link_R2_R4_1', 'Link_R2_R3_1'], 'configure'], ['R3', ['Link_R1_R3_1', 'Link_R3_R5_1', 'Link_R2_R3_1'], 'configure'], ['...</msg>
<status endtime="20181217 15:37:59.438" starttime="20181217 15:37:59.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start configure</arg>
<arg>${load_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure">
<arguments>
<arg>${load_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:38:25.895">Configuring IP address for R1Configuring IP address for R2Configuring IP address for R3Configuring IP address for R4Configuring IP address for R5Waiting thread #ConfigureRouter_R1

R1#
R1#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#              interface Ethernet 1/0
R1(config-if)#
R1(config-if)#              ip address 192.168.23.3  255.255.255.0
R1(config-if)#
R1(config-if)#              no shutdown
R1(config-if)#
R1(config-if)#              

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/0
R2(config-if)#
R2(config-if)#              ip address 192.168.23.2  255.255.255.0
R2(config-if)#
R2(config-if)#              no shutdown
R2(config-if)#
R2(config-if)#              

R5#
R5#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#              interface Ethernet 1/0
R5(config-if)#
R5(config-if)#              ip address 192.168.45.6  255.255.255.0
R5(config-if)#
R5(config-if)#              no shutdown
R5(config-if)#
R5(config-if)#              

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/1
R3(config-if)#
R3(config-if)#              ip address 192.168.34.4  255.255.255.0
R3(config-if)#
R3(config-if)#              no shutdown
R3(config-if)#
R3(config-if)#              

R4#
R4#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#              interface Ethernet 1/0
R4(config-if)#
R4(config-if)#              ip address 192.168.12.1  255.255.255.0
R4(config-if)#
R4(config-if)#              no shutdown
R4(config-if)#
R4(config-if)#              
ip 192.168.70.20 255.255.255.0 192.168.70.10
Checking for duplicate address...
PC1 : 192.168.70.20 255.255.255.0 gateway 192.168.70.10

PC-1&gt; 
ifconfig eth0 192.168.80.20
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 

R5#
R5#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#              interface Ethernet 1/1
R5(config-if)#
R5(config-if)#              ip address 192.168.80.10  255.255.255.0
R5(config-if)#
R5(config-if)#              no shutdown
R5(config-if)#
R5(config-if)#              
Configured  IP Address for R5
R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/0
R3(config-if)#
R3(config-if)#              ip address 192.168.45.4  255.255.255.0
R3(config-if)#
R3(config-if)#              no shutdown
R3(config-if)#
R3(config-if)#              

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/1
R2(config-if)#
R2(config-if)#              ip address 192.168.12.2  255.255.255.0
R2(config-if)#
R2(config-if)#              no shutdown
R2(config-if)#
R2(config-if)#              

R1#
R1#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#              interface Ethernet 1/1
R1(config-if)#
R1(config-if)#              ip address 192.168.34.3  255.255.255.0
R1(config-if)#
R1(config-if)#              no shutdown
R1(config-if)#
R1(config-if)#              

R4#
R4#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#              interface Ethernet 1/1
R4(config-if)#
R4(config-if)#              ip address 192.168.70.10  255.255.255.0
R4(config-if)#
R4(config-if)#              no shutdown
R4(config-if)#
R4(config-if)#              
Configured  IP Address for R1Waiting thread #ConfigureRouter_R2
Configured  IP Address for R4route add default gw 192.168.80.10
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# [K
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/2
R3(config-if)#
R3(config-if)#              ip address 192.168.50.4  255.255.255.0
R3(config-if)#
R3(config-if)#              no shutdown
R3(config-if)#
R3(config-if)#              
Configured  IP Address for R3
R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/2
R2(config-if)#
R2(config-if)#              ip address 192.168.50.2  255.255.255.0
R2(config-if)#
R2(config-if)#              no shutdown
R2(config-if)#
R2(config-if)#              
Configured  IP Address for R2Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5
Waiting thread #ConfigureRouter_PC-1
Waiting thread #ConfigureRouter_Ubuntu</msg>
<status endtime="20181217 15:38:25.895" starttime="20181217 15:37:59.438" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:38:25.895">${result} = True</msg>
<status endtime="20181217 15:38:25.895" starttime="20181217 15:37:59.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>IP address configuration failed</arg>
</arguments>
<status endtime="20181217 15:38:25.896" starttime="20181217 15:38:25.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>IP_Address configured on all Routers</arg>
</arguments>
<status endtime="20181217 15:38:25.897" starttime="20181217 15:38:25.896" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:25.897" starttime="20181217 15:37:59.433" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:25.897" starttime="20181217 15:37:59.433" status="PASS" critical="yes"></status>
</test>
<test id="s1-t2" name="Configure loopback interface as per the topology">
<kw library="Resource" name="Set loopback interface">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Setting Loopback interface</arg>
</arguments>
<status endtime="20181217 15:38:25.899" starttime="20181217 15:38:25.898" status="PASS"></status>
</kw>
<kw type="for" name="${var} IN [ @{Devices} ]">
<kw type="foritem" name="${var} = R1">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:25.899">${load_device} = ['R1', 'set']</msg>
<status endtime="20181217 15:38:25.899" starttime="20181217 15:38:25.899" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status endtime="20181217 15:38:25.900" starttime="20181217 15:38:25.900" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:25.900" starttime="20181217 15:38:25.899" status="PASS"></status>
</kw>
<kw type="foritem" name="${var} = R2">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:25.900">${load_device} = ['R2', 'set']</msg>
<status endtime="20181217 15:38:25.901" starttime="20181217 15:38:25.900" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status endtime="20181217 15:38:25.901" starttime="20181217 15:38:25.901" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:25.901" starttime="20181217 15:38:25.900" status="PASS"></status>
</kw>
<kw type="foritem" name="${var} = R3">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:25.902">${load_device} = ['R3', 'set']</msg>
<status endtime="20181217 15:38:25.902" starttime="20181217 15:38:25.901" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status endtime="20181217 15:38:25.902" starttime="20181217 15:38:25.902" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:25.902" starttime="20181217 15:38:25.901" status="PASS"></status>
</kw>
<kw type="foritem" name="${var} = R4">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:25.903">${load_device} = ['R4', 'set']</msg>
<status endtime="20181217 15:38:25.903" starttime="20181217 15:38:25.902" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status endtime="20181217 15:38:25.903" starttime="20181217 15:38:25.903" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:25.903" starttime="20181217 15:38:25.902" status="PASS"></status>
</kw>
<kw type="foritem" name="${var} = R5">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>set</arg>
</arguments>
<assign>
<var>${load_device}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:25.904">${load_device} = ['R5', 'set']</msg>
<status endtime="20181217 15:38:25.904" starttime="20181217 15:38:25.903" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${load_devices_lo}</arg>
<arg>${load_device}</arg>
</arguments>
<status endtime="20181217 15:38:25.904" starttime="20181217 15:38:25.904" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:25.904" starttime="20181217 15:38:25.903" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:25.904" starttime="20181217 15:38:25.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start configure loopback</arg>
<arg>${load_devices_lo}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Loopback">
<arguments>
<arg>${load_devices_lo}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:38:34.920">Waiting thread #ConfigureRouter_R1

R1#
R1#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#          interface loopback0
R1(config-if)#
R1(config-if)#          ip address 1.1.1.1  255.255.255.255
R1(config-if)#
R1(config-if)#          end
R1#
R1#          
Waiting thread #ConfigureRouter_R2

R5#
R5#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#          interface loopback0
R5(config-if)#
R5(config-if)#          ip address 5.5.5.5  255.255.255.255
R5(config-if)#
R5(config-if)#          end
R5#
R5#          

R3#
R3#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#          interface loopback0
R3(config-if)#
R3(config-if)#          ip address 3.3.3.3  255.255.255.255
R3(config-if)#
R3(config-if)#          end
R3#
R3#          

R2#
R2#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#          interface loopback0
R2(config-if)#
R2(config-if)#          ip address 2.2.2.2  255.255.255.255
R2(config-if)#
R2(config-if)#          end
R2#
R2#          

R4#
R4#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#          interface loopback0
R4(config-if)#
R4(config-if)#          ip address 4.4.4.4  255.255.255.255
R4(config-if)#
R4(config-if)#          end
R4#
R4#          
Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5</msg>
<status endtime="20181217 15:38:34.920" starttime="20181217 15:38:25.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:38:34.921">${result} = True</msg>
<status endtime="20181217 15:38:34.921" starttime="20181217 15:38:25.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Configuring Loopback IP failed</arg>
</arguments>
<status endtime="20181217 15:38:34.922" starttime="20181217 15:38:34.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Loopback_Address configured on all Routers</arg>
</arguments>
<status endtime="20181217 15:38:34.922" starttime="20181217 15:38:34.922" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:34.922" starttime="20181217 15:38:25.898" status="PASS"></status>
</kw>
<status endtime="20181217 15:38:34.922" starttime="20181217 15:38:25.897" status="PASS" critical="yes"></status>
</test>
<test id="s1-t3" name="Configure OSPF within AS2 to advertise the connected networks">
<kw library="Resource" name="Enable OSPF in devices present in AS2 and set the ospf neighbors">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R1}</arg>
<arg>${Area1}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${load_device_R1}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:34.924">${load_device_R1} = ['R1', 1, ['192.168.23.0  0.0.0.255', '192.168.34.0  0.0.0.255', '1.1.1.0  0.0.0.255'], 0, 'enable']</msg>
<status endtime="20181217 15:38:34.924" starttime="20181217 15:38:34.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R2}</arg>
<arg>${Area1}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${load_device_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:34.925">${load_device_R2} = ['R2', 1, ['192.168.23.0  0.0.0.255', '192.168.50.0  0.0.0.255', '2.2.2.0  0.0.0.255'], 0, 'enable']</msg>
<status endtime="20181217 15:38:34.925" starttime="20181217 15:38:34.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R3}</arg>
<arg>${Area1}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${load_device_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:34.925">${load_device_R3} = ['R3', 1, ['192.168.34.0  0.0.0.255', '192.168.50.0  0.0.0.255', '3.3.3.0  0.0.0.255'], 0, 'enable']</msg>
<status endtime="20181217 15:38:34.925" starttime="20181217 15:38:34.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${load_device_R1}</arg>
<arg>${load_device_R2}</arg>
<arg>${load_device_R3}</arg>
</arguments>
<assign>
<var>${load_devices}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:38:34.926">${load_devices} = [['R1', 1, ['192.168.23.0  0.0.0.255', '192.168.34.0  0.0.0.255', '1.1.1.0  0.0.0.255'], 0, 'enable'], ['R2', 1, ['192.168.23.0  0.0.0.255', '192.168.50.0  0.0.0.255', '2.2.2.0  0.0.0.255'], 0, 'enabl...</msg>
<status endtime="20181217 15:38:34.926" starttime="20181217 15:38:34.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_configure_ospf</arg>
<arg>${load_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Ospf">
<arguments>
<arg>${load_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:39:01.898">Waiting thread #ConfigureRouter_R1

R2#
R2#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                                router ospf 1
R2(config-router)#
R2(config-router)#                                network 192.168.23.0  0.0.0$                     network 192.168.23.0  0.0.0.         255 area network 192.168.23.0  0.0.0.255 area 0         
R2(config-router)#
R2(config-router)#                                

R1#
R1#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                                router ospf 1
R1(config-router)#
R1(config-router)#                                network 192.168.23.0  0.0.0$                     network 192.168.23.0  0.0.0.         255 area network 192.168.23.0  0.0.0.255 area 0         
R1(config-router)#
R1(config-router)#                                

R3#
R3#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                                router ospf 1
R3(config-router)#
R3(config-router)#                                network 192.168.34.0  0.0.0$                     network 192.168.34.0  0.0.0.         255 area network 192.168.34.0  0.0.0.255 area 0         
R3(config-router)#
R3(config-router)#                                

R2#
R2#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                                router ospf 1
R2(config-router)#
R2(config-router)#                                network 192.168.50.0  0.0.0$                     network 192.168.50.0  0.0.0.         255 area network 192.168.50.0  0.0.0.255 area 0         
R2(config-router)#
R2(config-router)#                                

R1#
R1#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                                router ospf 1
R1(config-router)#
R1(config-router)#                                network 192.168.34.0  0.0.0$                     network 192.168.34.0  0.0.0.         255 area network 192.168.34.0  0.0.0.255 area 0         
R1(config-router)#
R1(config-router)#                                

R3#
R3#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                                router ospf 1
R3(config-router)#
R3(config-router)#                                network 192.168.50.0  0.0.0$                     network 192.168.50.0  0.0.0.         255 area network 192.168.50.0  0.0.0.255 area 0         
R3(config-router)#
R3(config-router)#                                

R2#
R2#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                                router ospf 1
R2(config-router)#
R2(config-router)#                                network 2.2.2.0  0.0.0.255 $                     network 2.2.2.0  0.0.0.255 a         rea 0
R2(config-router)#
R2(config-router)#                                

R1#
R1#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                                router ospf 1
R1(config-router)#
R1(config-router)#                                network 1.1.1.0  0.0.0.255 $                     network 1.1.1.0  0.0.0.255 a         rea 0
R1(config-router)#
R1(config-router)#                                
Waiting thread #ConfigureRouter_R2
Waiting thread #ConfigureRouter_R3

R3#
R3#                                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                                router ospf 1
R3(config-router)#
R3(config-router)#                                network 3.3.3.0  0.0.0.255 $                     network 3.3.3.0  0.0.0.255 a         rea 0
R3(config-router)#
R3(config-router)#</msg>
<status endtime="20181217 15:39:01.898" starttime="20181217 15:38:34.927" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:39:01.898">${result} = True</msg>
<status endtime="20181217 15:39:01.898" starttime="20181217 15:38:34.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Configuring ospf on Routers has failed</arg>
</arguments>
<status endtime="20181217 15:39:01.900" starttime="20181217 15:39:01.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>OSPF configured in Routers</arg>
</arguments>
<status endtime="20181217 15:39:01.900" starttime="20181217 15:39:01.900" status="PASS"></status>
</kw>
<status endtime="20181217 15:39:01.900" starttime="20181217 15:38:34.923" status="PASS"></status>
</kw>
<status endtime="20181217 15:39:01.900" starttime="20181217 15:38:34.923" status="PASS" critical="yes"></status>
</test>
<test id="s1-t4" name="Configure VRFs to PE routers">
<kw library="Resource" name="Create and Assign VRFs to PE routers">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Configuring VRFs on PE routers</arg>
</arguments>
<status endtime="20181217 15:39:01.902" starttime="20181217 15:39:01.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${VRF_NAME}</arg>
<arg>${RD}</arg>
<arg>${RT}</arg>
<arg>${VRF_R2_Interface}</arg>
<arg>${R4_einterface}</arg>
<arg>${mask}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${vrf_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:01.903">${vrf_R2} = ['R2', 'VRF1', '1:1', '10:10', ['Link_R2_VRF'], '192.168.12.2', '255.255.255.0', 'enable']</msg>
<status endtime="20181217 15:39:01.903" starttime="20181217 15:39:01.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${VRF_NAME}</arg>
<arg>${RD}</arg>
<arg>${RT}</arg>
<arg>${VRF_R3_Interface}</arg>
<arg>${R5_einterface}</arg>
<arg>${mask}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${vrf_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:01.903">${vrf_R3} = ['R3', 'VRF1', '1:1', '10:10', ['Link_R3_VRF'], '192.168.45.4', '255.255.255.0', 'enable']</msg>
<status endtime="20181217 15:39:01.903" starttime="20181217 15:39:01.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${vrf_R2}</arg>
<arg>${vrf_R3}</arg>
</arguments>
<assign>
<var>${vrf_config}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:01.904">${vrf_config} = [['R2', 'VRF1', '1:1', '10:10', ['Link_R2_VRF'], '192.168.12.2', '255.255.255.0', 'enable'], ['R3', 'VRF1', '1:1', '10:10', ['Link_R3_VRF'], '192.168.45.4', '255.255.255.0', 'enable']]</msg>
<status endtime="20181217 15:39:01.904" starttime="20181217 15:39:01.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_configure_vrf</arg>
<arg>${vrf_config}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Vrf">
<arguments>
<arg>${vrf_config}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:39:19.954">Waiting thread #ConfigureRouter_R2

R2#
R2#                                          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                                          ip vrf VRF1
R2(config-vrf)#
R2(config-vrf)#                                          rd 1:1
R2(config-vrf)#
R2(config-vrf)#                                          route-target export $                               route-target export 1         0:10
R2(config-vrf)#
R2(config-vrf)#                                          route-target import $                               route-target import 1         0:10
R2(config-vrf)#
R2(config-vrf)#                                          

R3#
R3#                                          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                                          ip vrf VRF1
R3(config-vrf)#
R3(config-vrf)#                                          rd 1:1
R3(config-vrf)#
R3(config-vrf)#                                          route-target export $                               route-target export 1         0:10
R3(config-vrf)#
R3(config-vrf)#                                          route-target import $                               route-target import 1         0:10
R3(config-vrf)#
R3(config-vrf)#                                          
Waiting thread #ConfigureRouter_R3</msg>
<status endtime="20181217 15:39:19.954" starttime="20181217 15:39:01.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:39:19.955">${result} = True</msg>
<status endtime="20181217 15:39:19.955" starttime="20181217 15:39:01.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Configuring VRFs on Routers has failed</arg>
</arguments>
<status endtime="20181217 15:39:19.955" starttime="20181217 15:39:19.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>VRFs configured in Routers</arg>
</arguments>
<status endtime="20181217 15:39:19.956" starttime="20181217 15:39:19.956" status="PASS"></status>
</kw>
<status endtime="20181217 15:39:19.956" starttime="20181217 15:39:01.901" status="PASS"></status>
</kw>
<status endtime="20181217 15:39:19.956" starttime="20181217 15:39:01.901" status="PASS" critical="yes"></status>
</test>
<test id="s1-t5" name="Configure MP-BGP on PE routers">
<kw library="Resource" name="Enable IBGP and advertise the updates from the loopback interface">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${AS_id}</arg>
<arg>${R3_interface}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${ibgp_device_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:19.958">${ibgp_device_R2} = ['R2', 2, '3.3.3.3', 'enable']</msg>
<status endtime="20181217 15:39:19.958" starttime="20181217 15:39:19.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${AS_id}</arg>
<arg>${R2_interface}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${ibgp_device_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:19.959">${ibgp_device_R3} = ['R3', 2, '2.2.2.2', 'enable']</msg>
<status endtime="20181217 15:39:19.959" starttime="20181217 15:39:19.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ibgp_device_R2}</arg>
<arg>${ibgp_device_R3}</arg>
</arguments>
<assign>
<var>${ibgp_devices}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:19.959">${ibgp_devices} = [['R2', 2, '3.3.3.3', 'enable'], ['R3', 2, '2.2.2.2', 'enable']]</msg>
<status endtime="20181217 15:39:19.959" starttime="20181217 15:39:19.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start ibgp</arg>
<arg>${ibgp_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Ibgp">
<arguments>
<arg>${ibgp_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:39:31.007">Waiting thread #ConfigureRouter_R2

R3#
R3#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                        router bgp 2
R3(config-router)#
R3(config-router)#                        neighbor 2.2.2.2 remote-as 2
R3(config-router)#
R3(config-router)#                        neighbor 2.2.2.2 update-source loop$             neighbor 2.2.2.2 update-source loopb         ack 0
R3(config-router)#
R3(config-router)#                        

R2#
R2#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                        router bgp 2
R2(config-router)#
R2(config-router)#                        neighbor 3.3.3.3 remote-as 2
R2(config-router)#
R2(config-router)#                        neighbor 3.3.3.3 update-source loop$             neighbor 3.3.3.3 update-source loopb         ack 0
R2(config-router)#
R2(config-router)#                        
Waiting thread #ConfigureRouter_R3</msg>
<status endtime="20181217 15:39:31.007" starttime="20181217 15:39:19.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:39:31.007">${result} = True</msg>
<status endtime="20181217 15:39:31.007" starttime="20181217 15:39:19.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>IBGP configuration failed</arg>
</arguments>
<status endtime="20181217 15:39:31.008" starttime="20181217 15:39:31.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>IBGP configured on R2 and R3 routers</arg>
</arguments>
<status endtime="20181217 15:39:31.009" starttime="20181217 15:39:31.008" status="PASS"></status>
</kw>
<status endtime="20181217 15:39:31.009" starttime="20181217 15:39:19.957" status="PASS"></status>
</kw>
<kw library="Resource" name="Establish route between R2 and R3">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${R3_lointerface}</arg>
</arguments>
<assign>
<var>${route_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:31.010">${route_R2} = ['R2', 2, '3.3.3.3']</msg>
<status endtime="20181217 15:39:31.010" starttime="20181217 15:39:31.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${R2_lointerface}</arg>
</arguments>
<assign>
<var>${route_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:31.010">${route_R3} = ['R3', 2, '2.2.2.2']</msg>
<status endtime="20181217 15:39:31.010" starttime="20181217 15:39:31.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${route_R2}</arg>
<arg>${route_R3}</arg>
</arguments>
<assign>
<var>${routes}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:31.011">${routes} = [['R2', 2, '3.3.3.3'], ['R3', 2, '2.2.2.2']]</msg>
<status endtime="20181217 15:39:31.011" starttime="20181217 15:39:31.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>establish route</arg>
<arg>${routes}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Establish Route">
<arguments>
<arg>${routes}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:39:48.474">Waiting thread #ConfigureRouter_R2

R2#
R2#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                router bgp 2
R2(config-router)#
R2(config-router)#                neighbor 3.3.3.3 next-hop-self
R2(config-router)#
R2(config-router)#                end
R2#
R2#                
R2#
R2#
*Dec 17 15:27:49.815: %SYS-5-CONFIG_I: Configured from console by console
R2#
Waiting thread #ConfigureRouter_R3

R3#
R3#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                router bgp 2
R3(config-router)#
R3(config-router)#                neighbor 2.2.2.2 next-hop-self
R3(config-router)#
R3(config-router)#                end
R3#
R3#                
R3#
R3#
*Dec 17 15:28:02.115: %SYS-5-CONFIG_I: Configured from console by console
R3#</msg>
<status endtime="20181217 15:39:48.475" starttime="20181217 15:39:31.012" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:39:48.475">${result} = True</msg>
<status endtime="20181217 15:39:48.475" starttime="20181217 15:39:31.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Establishment of route between R2 and R3 failed</arg>
</arguments>
<status endtime="20181217 15:39:48.476" starttime="20181217 15:39:48.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Established route between R2 and R3</arg>
</arguments>
<status endtime="20181217 15:39:48.476" starttime="20181217 15:39:48.476" status="PASS"></status>
</kw>
<status endtime="20181217 15:39:48.477" starttime="20181217 15:39:31.009" status="PASS"></status>
</kw>
<kw library="Resource" name="Enable MP-BGP on PE routers">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Configure MPLS on PE router R2 and R3</arg>
</arguments>
<status endtime="20181217 15:39:48.477" starttime="20181217 15:39:48.477" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${R3_lointerface}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${mpbgp_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:48.478">${mpbgp_R2} = ['R2', 2, '3.3.3.3', 'enable']</msg>
<status endtime="20181217 15:39:48.478" starttime="20181217 15:39:48.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${R2_lointerface}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${mpbgp_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:48.479">${mpbgp_R3} = ['R3', 2, '2.2.2.2', 'enable']</msg>
<status endtime="20181217 15:39:48.479" starttime="20181217 15:39:48.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${mpbgp_R3}</arg>
<arg>${mpbgp_R2}</arg>
</arguments>
<assign>
<var>${load_mpbgp}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:39:48.479">${load_mpbgp} = [['R3', 2, '2.2.2.2', 'enable'], ['R2', 2, '3.3.3.3', 'enable']]</msg>
<status endtime="20181217 15:39:48.479" starttime="20181217 15:39:48.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_mpbgp</arg>
<arg>${load_mpbgp}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Mpbgp">
<arguments>
<arg>${load_mpbgp}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:40:06.319">Waiting thread #ConfigureRouter_R3

R3#
R3#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                        router bgp 2
R3(config-router)#
R3(config-router)#                        address-family vpnv4
R3(config-router-af)#
R3(config-router-af)#                        neighbor 2.2.2.2 activate
R3(config-router-af)#
R3(config-router-af)#                        neighbor 2.2.2.2 next-hop-self
R3(config-router-af)#
R3(config-router-af)#                        

R2#
R2#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                        router bgp 2
R2(config-router)#
R2(config-router)#                        address-family vpnv4
R2(config-router-af)#
R2(config-router-af)#                        neighbor 3.3.3.3 activate
R2(config-router-af)#
R2(config-router-af)#                        neighbor 3.3.3.3 next-hop-self
R2(config-router-af)#
R2(config-router-af)#                        
Waiting thread #ConfigureRouter_R2</msg>
<status endtime="20181217 15:40:06.319" starttime="20181217 15:39:48.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:40:06.319">${result} = True</msg>
<status endtime="20181217 15:40:06.319" starttime="20181217 15:39:48.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to configure MP-BGP on PE routers</arg>
</arguments>
<status endtime="20181217 15:40:06.320" starttime="20181217 15:40:06.320" status="PASS"></status>
</kw>
<status endtime="20181217 15:40:06.320" starttime="20181217 15:39:48.477" status="PASS"></status>
</kw>
<status endtime="20181217 15:40:06.321" starttime="20181217 15:39:19.957" status="PASS" critical="yes"></status>
</test>
<test id="s1-t6" name="Enable BGP Synchronisation">
<kw library="Resource" name="Enable synchronisation between border routers">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${AS_id}</arg>
</arguments>
<assign>
<var>${ibgp_sync_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:06.322">${ibgp_sync_R2} = ['R2', 2]</msg>
<status endtime="20181217 15:40:06.322" starttime="20181217 15:40:06.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${AS_id}</arg>
</arguments>
<assign>
<var>${ibgp_sync_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:06.323">${ibgp_sync_R3} = ['R3', 2]</msg>
<status endtime="20181217 15:40:06.323" starttime="20181217 15:40:06.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ibgp_sync_R2}</arg>
<arg>${ibgp_sync_R3}</arg>
</arguments>
<assign>
<var>${sync_enable}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:06.323">${sync_enable} = [['R2', 2], ['R3', 2]]</msg>
<status endtime="20181217 15:40:06.323" starttime="20181217 15:40:06.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>enable sync</arg>
<arg>${sync_enable}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Enable Sync">
<arguments>
<arg>${sync_enable}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:40:19.941">Waiting thread #ConfigureRouter_R2

R3#
R3#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                router bgp 2
R3(config-router)#
R3(config-router)#                synchronization
R3(config-router)#
R3(config-router)#                end
R3#
R3#                
R3#
R3#
*Dec 17 15:28:33.515: %SYS-5-CONFIG_I: Configured from console by console
R3#

R2#
R2#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                router bgp 2
R2(config-router)#
R2(config-router)#                synchronization
R2(config-router)#
R2(config-router)#                end
R2#
R2#                
R2#
R2#
*Dec 17 15:28:23.867: %SYS-5-CONFIG_I: Configured from console by console
R2#
Waiting thread #ConfigureRouter_R3</msg>
<status endtime="20181217 15:40:19.941" starttime="20181217 15:40:06.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:40:19.942">${result} = True</msg>
<status endtime="20181217 15:40:19.942" starttime="20181217 15:40:06.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>BGP synchronization failed</arg>
</arguments>
<status endtime="20181217 15:40:19.942" starttime="20181217 15:40:19.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Enabled BGP synchronization on R2 and R3 routers</arg>
</arguments>
<status endtime="20181217 15:40:19.943" starttime="20181217 15:40:19.943" status="PASS"></status>
</kw>
<status endtime="20181217 15:40:19.943" starttime="20181217 15:40:06.322" status="PASS"></status>
</kw>
<status endtime="20181217 15:40:19.943" starttime="20181217 15:40:06.321" status="PASS" critical="yes"></status>
</test>
<test id="s1-t7" name="Configure MPLS on PE and P routers">
<kw library="Resource" name="Enable MPLS on PE and P routers">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Enable MPLS on PE and P routers</arg>
</arguments>
<status endtime="20181217 15:40:19.945" starttime="20181217 15:40:19.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Links_of_R1}</arg>
<arg>${MPLS_LABEL_PROTO}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${mpls_R1}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:19.945">${mpls_R1} = ['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'ldp', 'enable']</msg>
<status endtime="20181217 15:40:19.945" starttime="20181217 15:40:19.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${MPLS_R2_Interface}</arg>
<arg>${MPLS_LABEL_PROTO}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${mpls_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:19.946">${mpls_R2} = ['R2', ['Link_R2_MPLS'], 'ldp', 'enable']</msg>
<status endtime="20181217 15:40:19.946" starttime="20181217 15:40:19.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${MPLS_R3_Interface}</arg>
<arg>${MPLS_LABEL_PROTO}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${mpls_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:19.947">${mpls_R3} = ['R3', ['Link_R3_MPLS'], 'ldp', 'enable']</msg>
<status endtime="20181217 15:40:19.947" starttime="20181217 15:40:19.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${mpls_R1}</arg>
<arg>${mpls_R2}</arg>
<arg>${mpls_R3}</arg>
</arguments>
<assign>
<var>${mpls_config}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:19.947">${mpls_config} = [['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'ldp', 'enable'], ['R2', ['Link_R2_MPLS'], 'ldp', 'enable'], ['R3', ['Link_R3_MPLS'], 'ldp', 'enable']]</msg>
<status endtime="20181217 15:40:19.947" starttime="20181217 15:40:19.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_mpls_bgp</arg>
<arg>${mpls_config}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Mpls Bgp">
<arguments>
<arg>${mpls_config}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:40:47.665">Waiting thread #ConfigureRouter_R1

R1#
R1#                                          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                                          ip cef
R1(config)#
R1(config)#                                          mpls label protocol ldp
R1(config)#
R1(config)#                                          mpls ldp router-id Loopb$                               mpls ldp router-id Loopba         ck0 force
R1(config)#
R1(config)#                                          interface Ethernet 1/0
R1(config-if)#
R1(config-if)#                                          mpls ip
R1(config-if)#
R1(config-if)#                                          mpls label protocol l$                               mpls label protocol ld         p
R1(config-if)#
R1(config-if)#                                          

R3#
R3#                                          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                                          ip cef
R3(config)#
R3(config)#                                          mpls label protocol ldp
R3(config)#
R3(config)#                                          mpls ldp router-id Loopb$                               mpls ldp router-id Loopba         ck0 force
R3(config)#
R3(config)#                                          interface Ethernet 1/2
R3(config-if)#
R3(config-if)#                                          mpls ip
R3(config-if)#
R3(config-if)#                                          mpls label protocol l$                               mpls label protocol ld         p
R3(config-if)#
R3(config-if)#                                          

R2#
R2#                                          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                                          ip cef
R2(config)#
R2(config)#                                          mpls label protocol ldp
R2(config)#
R2(config)#                                          mpls ldp router-id Loopb$                               mpls ldp router-id Loopba         ck0 force
R2(config)#
R2(config)#                                          interface Ethernet 1/2
R2(config-if)#
R2(config-if)#                                          mpls ip
R2(config-if)#
R2(config-if)#                                          mpls label protocol l$                               mpls label protocol ld         p
R2(config-if)#
R2(config-if)#                                          

R1#
R1#                                          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                                          ip cef
R1(config)#
R1(config)#                                          mpls label protocol ldp
R1(config)#
R1(config)#                                          mpls ldp router-id Loopb$                               mpls ldp router-id Loopba         ck0 force
R1(config)#
R1(config)#                                          interface Ethernet 1/1
R1(config-if)#
R1(config-if)#                                          mpls ip
R1(config-if)#
R1(config-if)#                                          mpls label protocol l$                               mpls label protocol ld         p
R1(config-if)#
R1(config-if)#                                          
Waiting thread #ConfigureRouter_R2
Waiting thread #ConfigureRouter_R3</msg>
<status endtime="20181217 15:40:47.666" starttime="20181217 15:40:19.948" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:40:47.666">${result} = True</msg>
<status endtime="20181217 15:40:47.666" starttime="20181217 15:40:19.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Configuring MPLS on PE and P Routers has failed</arg>
</arguments>
<status endtime="20181217 15:40:47.667" starttime="20181217 15:40:47.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>MPLS configured on PE and P Routers</arg>
</arguments>
<status endtime="20181217 15:40:47.667" starttime="20181217 15:40:47.667" status="PASS"></status>
</kw>
<status endtime="20181217 15:40:47.668" starttime="20181217 15:40:19.944" status="PASS"></status>
</kw>
<status endtime="20181217 15:40:47.668" starttime="20181217 15:40:19.944" status="PASS" critical="yes"></status>
</test>
<test id="s1-t8" name="Configure EBGP on customer routers">
<kw library="Resource" name="Enable BGP on customer routers">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${R4_AS_id}</arg>
<arg>${R4_einterface}</arg>
<arg>${R4_neighbor_AS_id}</arg>
<arg>enable</arg>
<arg>${R4_R2_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ebgp_R4}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:47.670">${ebgp_R4} = ['R4', 1, '192.168.12.2', 2, 'enable', '192.168.12.0', '255.255.255.0']</msg>
<status endtime="20181217 15:40:47.670" starttime="20181217 15:40:47.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${R5_AS_id}</arg>
<arg>${R5_einterface}</arg>
<arg>${R5_neighbor_AS_id}</arg>
<arg>enable</arg>
<arg>${R3_R5_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ebgp_R5}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:47.670">${ebgp_R5} = ['R5', 3, '192.168.45.4', 2, 'enable', '192.168.45.0', '255.255.255.0']</msg>
<status endtime="20181217 15:40:47.670" starttime="20181217 15:40:47.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ebgp_R4}</arg>
<arg>${ebgp_R5}</arg>
</arguments>
<assign>
<var>${ebgp_enable}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:47.671">${ebgp_enable} = [['R4', 1, '192.168.12.2', 2, 'enable', '192.168.12.0', '255.255.255.0'], ['R5', 3, '192.168.45.4', 2, 'enable', '192.168.45.0', '255.255.255.0']]</msg>
<status endtime="20181217 15:40:47.671" starttime="20181217 15:40:47.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ebgp configure</arg>
<arg>${ebgp_enable}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Ebgp Configure">
<arguments>
<arg>${ebgp_enable}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:40:56.398">Waiting thread #ConfigureRouter_R4

R4#
R4#                            configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#                            router bgp 1
R4(config-router)#
R4(config-router)#                            neighbor 192.168.12.2 remote-as$                 neighbor 192.168.12.2 remote-as          2
R4(config-router)#
R4(config-router)#                            network 192.168.12.0 mask 255.2$                 network 192.168.12.0 mask 255.25         5.255.0
R4(config-router)#
R4(config-router)#                            

R5#
R5#                            configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#                            router bgp 3
R5(config-router)#
R5(config-router)#                            neighbor 192.168.45.4 remote-as$                 neighbor 192.168.45.4 remote-as          2
R5(config-router)#
R5(config-router)#                            network 192.168.45.0 mask 255.2$                 network 192.168.45.0 mask 255.25         5.255.0
R5(config-router)#
R5(config-router)#                            
Waiting thread #ConfigureRouter_R5</msg>
<status endtime="20181217 15:40:56.398" starttime="20181217 15:40:47.672" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:40:56.399">${result} = True</msg>
<status endtime="20181217 15:40:56.399" starttime="20181217 15:40:47.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>EBGP configuration on customer routers failed</arg>
</arguments>
<status endtime="20181217 15:40:56.400" starttime="20181217 15:40:56.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>EBGP configured on customer routers</arg>
</arguments>
<status endtime="20181217 15:40:56.400" starttime="20181217 15:40:56.400" status="PASS"></status>
</kw>
<status endtime="20181217 15:40:56.400" starttime="20181217 15:40:47.669" status="PASS"></status>
</kw>
<status endtime="20181217 15:40:56.401" starttime="20181217 15:40:47.668" status="PASS" critical="yes"></status>
</test>
<test id="s1-t9" name="Configure EBGP towards customers on the PE routers">
<kw library="Resource" name="Enable EBGP towards customers on the PE routers">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Enable EBGP towards customers on the PE routers</arg>
</arguments>
<status endtime="20181217 15:40:56.402" starttime="20181217 15:40:56.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${VRF_NAME}</arg>
<arg>${R2_einterface}</arg>
<arg>${R2_neighbor_AS_id}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${ebgp_vrf_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:56.403">${ebgp_vrf_R2} = ['R2', 2, 'VRF1', '192.168.12.1', 1, 'enable']</msg>
<status endtime="20181217 15:40:56.403" starttime="20181217 15:40:56.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${VRF_NAME}</arg>
<arg>${R3_einterface}</arg>
<arg>${R3_neighbor_AS_id}</arg>
<arg>enable</arg>
</arguments>
<assign>
<var>${ebgp_vrf_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:56.403">${ebgp_vrf_R3} = ['R3', 2, 'VRF1', '192.168.45.6', 3, 'enable']</msg>
<status endtime="20181217 15:40:56.403" starttime="20181217 15:40:56.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ebgp_vrf_R2}</arg>
<arg>${ebgp_vrf_R3}</arg>
</arguments>
<assign>
<var>${ebgp_vrf}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:40:56.404">${ebgp_vrf} = [['R2', 2, 'VRF1', '192.168.12.1', 1, 'enable'], ['R3', 2, 'VRF1', '192.168.45.6', 3, 'enable']]</msg>
<status endtime="20181217 15:40:56.404" starttime="20181217 15:40:56.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ebgp vrf configure</arg>
<arg>${ebgp_vrf}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Ebgp Vrf Configure">
<arguments>
<arg>${ebgp_vrf}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:41:14.282">Waiting thread #ConfigureRouter_R2

R2#
R2#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                        router bgp 2
R2(config-router)#
R2(config-router)#                        address-family ipv4 vrf VRF1
R2(config-router-af)#
R2(config-router-af)#                        neighbor 192.168.12.1 remote-as $             neighbor 192.168.12.1 remote-as 1         
R2(config-router-af)#
R2(config-router-af)#                        neighbor 192.168.12.1 activate  $             neighbor 192.168.12.1 activate              
R2(config-router-af)#
R2(config-router-af)#                        

R3#
R3#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                        router bgp 2
R3(config-router)#
R3(config-router)#                        address-family ipv4 vrf VRF1
R3(config-router-af)#
R3(config-router-af)#                        neighbor 192.168.45.6 remote-as $             neighbor 192.168.45.6 remote-as 3         
R3(config-router-af)#
R3(config-router-af)#                        neighbor 192.168.45.6 activate  $             neighbor 192.168.45.6 activate              
R3(config-router-af)#
R3(config-router-af)#                        
Waiting thread #ConfigureRouter_R3</msg>
<status endtime="20181217 15:41:14.283" starttime="20181217 15:40:56.405" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:41:14.283">${result} = True</msg>
<status endtime="20181217 15:41:14.283" starttime="20181217 15:40:56.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>EBGP configuration towards customers on the PE routers failed</arg>
</arguments>
<status endtime="20181217 15:41:14.284" starttime="20181217 15:41:14.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>EBGP configuration towards customers on the PE routers failed</arg>
</arguments>
<status endtime="20181217 15:41:14.285" starttime="20181217 15:41:14.285" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:14.285" starttime="20181217 15:40:56.401" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:14.286" starttime="20181217 15:40:56.401" status="PASS" critical="yes"></status>
</test>
<test id="s1-t10" name="Redistribute routes from OSPF into BGP">
<kw library="Resource" name="Redistribute routes from OSPF into BGP">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Redistributing routes from OSPF into BGP</arg>
</arguments>
<status endtime="20181217 15:41:14.288" starttime="20181217 15:41:14.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${Process_id}</arg>
</arguments>
<assign>
<var>${redistribution_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:14.289">${redistribution_R2} = ['R2', 2, 1]</msg>
<status endtime="20181217 15:41:14.289" starttime="20181217 15:41:14.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${Process_id}</arg>
</arguments>
<assign>
<var>${redistribution_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:14.289">${redistribution_R3} = ['R3', 2, 1]</msg>
<status endtime="20181217 15:41:14.290" starttime="20181217 15:41:14.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${redistribution_R2}</arg>
<arg>${redistribution_R3}</arg>
</arguments>
<assign>
<var>${redistribute_ospf}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:14.290">${redistribute_ospf} = [['R2', 2, 1], ['R3', 2, 1]]</msg>
<status endtime="20181217 15:41:14.290" starttime="20181217 15:41:14.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>redistribute ospf</arg>
<arg>${redistribute_ospf}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Redistribute Ospf">
<arguments>
<arg>${redistribute_ospf}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:41:23.783">Waiting thread #ConfigureRouter_R2

R2#
R2#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                router bgp 2
R2(config-router)#
R2(config-router)#                redistribute ospf 1
R2(config-router)#
R2(config-router)#                
Waiting thread #ConfigureRouter_R3

R3#
R3#                configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                router bgp 2
R3(config-router)#
R3(config-router)#                redistribute ospf 1
R3(config-router)#
R3(config-router)#</msg>
<status endtime="20181217 15:41:23.783" starttime="20181217 15:41:14.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:41:23.784">${result} = True</msg>
<status endtime="20181217 15:41:23.784" starttime="20181217 15:41:14.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Redistribution of routes from OSPF into BGP failed</arg>
</arguments>
<status endtime="20181217 15:41:23.785" starttime="20181217 15:41:23.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Redistributed routes from OSPF into BGP</arg>
</arguments>
<status endtime="20181217 15:41:23.786" starttime="20181217 15:41:23.785" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:23.786" starttime="20181217 15:41:14.287" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:23.786" starttime="20181217 15:41:14.286" status="PASS" critical="yes"></status>
</test>
<test id="s1-t11" name="Redistribute connnected routes into BGP">
<kw library="Resource" name="Redistribute connnected routes into BGP">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Redistributing connected routes into BGP</arg>
</arguments>
<status endtime="20181217 15:41:23.788" starttime="20181217 15:41:23.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${R4_AS_id}</arg>
</arguments>
<assign>
<var>${redistribution_R4}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:23.789">${redistribution_R4} = ['R4', 1]</msg>
<status endtime="20181217 15:41:23.789" starttime="20181217 15:41:23.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${R5_AS_id}</arg>
</arguments>
<assign>
<var>${redistribution_R5}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:23.790">${redistribution_R5} = ['R5', 3]</msg>
<status endtime="20181217 15:41:23.790" starttime="20181217 15:41:23.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${redistribution_R4}</arg>
<arg>${redistribution_R5}</arg>
</arguments>
<assign>
<var>${connected}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:23.791">${connected} = [['R4', 1], ['R5', 3]]</msg>
<status endtime="20181217 15:41:23.791" starttime="20181217 15:41:23.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>redistribute connected</arg>
<arg>${connected}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Redistribute Connected">
<arguments>
<arg>${connected}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:41:41.428">Waiting thread #ConfigureRouter_R4

R4#
R4#                                  configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#                                  router bgp 1
R4(config-router)#
R4(config-router)#                                  redistribute connected
R4(config-router)#
R4(config-router)#                                  end
R4#
R4#                                  
R4#
R4#
*Dec 17 15:33:21.459: %SYS-5-CONFIG_I: Configured from console by console
R4#
Waiting thread #ConfigureRouter_R5

R5#
R5#                                  configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#                                  router bgp 3
R5(config-router)#
R5(config-router)#                                  redistribute connected
R5(config-router)#
R5(config-router)#                                  end
R5#
R5#                                  
R5#
R5#
*Dec 17 15:33:15.439: %SYS-5-CONFIG_I: Configured from console by console
R5#</msg>
<status endtime="20181217 15:41:41.429" starttime="20181217 15:41:23.792" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:41:41.429">${result} = True</msg>
<status endtime="20181217 15:41:41.429" starttime="20181217 15:41:23.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Redistribution of connected routes failed</arg>
</arguments>
<status endtime="20181217 15:41:41.430" starttime="20181217 15:41:41.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Redistributed connnected routes into BGP</arg>
</arguments>
<status endtime="20181217 15:41:41.430" starttime="20181217 15:41:41.430" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:41.430" starttime="20181217 15:41:23.787" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:41.431" starttime="20181217 15:41:23.787" status="PASS" critical="yes"></status>
</test>
<test id="s1-t12" name="Check if ip address is set and interface is up">
<kw library="Resource" name="Check if ip address is set and interface is up">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Checking if IP address is set and interface is up</arg>
</arguments>
<status endtime="20181217 15:41:41.432" starttime="20181217 15:41:41.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R1}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:41.433">${ip_set_R1} = ['R1', 'show interfaces description']</msg>
<status endtime="20181217 15:41:41.433" starttime="20181217 15:41:41.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:41.433">${ip_set_R2} = ['R2', 'show interfaces description']</msg>
<status endtime="20181217 15:41:41.433" starttime="20181217 15:41:41.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:41.434">${ip_set_R3} = ['R3', 'show interfaces description']</msg>
<status endtime="20181217 15:41:41.434" starttime="20181217 15:41:41.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R4}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:41.434">${ip_set_R4} = ['R4', 'show interfaces description']</msg>
<status endtime="20181217 15:41:41.434" starttime="20181217 15:41:41.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>show interfaces description</arg>
</arguments>
<assign>
<var>${ip_set_R5}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:41.434">${ip_set_R5} = ['R5', 'show interfaces description']</msg>
<status endtime="20181217 15:41:41.435" starttime="20181217 15:41:41.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ip_set_R1}</arg>
<arg>${ip_set_R2}</arg>
<arg>${ip_set_R3}</arg>
<arg>${ip_set_R4}</arg>
<arg>${ip_set_R4}</arg>
</arguments>
<assign>
<var>${show_ip_interface}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:41.435">${show_ip_interface} = [['R1', 'show interfaces description'], ['R2', 'show interfaces description'], ['R3', 'show interfaces description'], ['R4', 'show interfaces description'], ['R4', 'show interfaces description']]</msg>
<status endtime="20181217 15:41:41.435" starttime="20181217 15:41:41.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>show ip interface</arg>
<arg>${show_ip_interface}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Show Ip Interface">
<arguments>
<arg>${show_ip_interface}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:41:55.122">Waiting thread #ConfigureRouter_R1

R3#
R3#        show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          up             up       
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R3#       
R3#
R3#

R4#
R4#
R4#
R4#        show interfaces description        show interfaces description
                                              ^
% Invalid input detected at '^' marker.

R4#
R4#
R4#
R4#        
R4#
R4#        
R4#
R4#

R4#
R4#
R4#
R4#        show interfaces description        show interfaces description
                                              ^
% Invalid input detected at '^' marker.

R4#
R4#
R4#
R4#        
R4#
R4#        
R4#
R4#

R2#
R2#        show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          up             up       
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R2#       
R2#
R2#

R1#
R1#        show interfaces description
Interface                      Status         Protocol Description
Fa0/0                          admin down     down     
Et1/0                          up             up       
Et1/1                          up             up       
Et1/2                          admin down     down     
Et1/3                          admin down     down     
Et2/0                          admin down     down     
Et2/1                          admin down     down     
Et2/2                          admin down     down     
Et2/3                          admin down     down     
Et3/0                          admin down     down     
Et3/1                          admin down     down     
Et3/2                          admin down     down     
Et3/3                          admin down     down     
Et4/0                          admin down     down     
Et4/1                          admin down     down     
Et4/2                          admin down     down     
Et4/3                          admin down     down     
Et5/0                          admin down     down     
Et5/1                          admin down     down     
Et5/2                          admin down     down     
Et5/3                          admin down     down     
Et6/0                          admin down     down     
 --More--         Et6/1                          admin down     down     
 --More--         Et6/2                          admin down     down     
Et6/3                          admin down     down     
Lo0                            up             up       
R1#       
R1#
R1#
Waiting thread #ConfigureRouter_R2
Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R4</msg>
<status endtime="20181217 15:41:55.123" starttime="20181217 15:41:41.436" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:41:55.123">${result} = True</msg>
<status endtime="20181217 15:41:55.123" starttime="20181217 15:41:41.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>IP address not set or interface not up in</arg>
<arg>${ELEMENT}</arg>
</arguments>
<status endtime="20181217 15:41:55.124" starttime="20181217 15:41:55.124" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:55.125" starttime="20181217 15:41:41.432" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:55.125" starttime="20181217 15:41:41.431" status="PASS" critical="yes"></status>
</test>
<test id="s1-t13" name="Check if OSPF neighbors are established">
<kw library="Resource" name="Check if OSPF neighbors are established">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Checking if OSPF neighbors are established</arg>
</arguments>
<status endtime="20181217 15:41:55.127" starttime="20181217 15:41:55.126" status="PASS"></status>
</kw>
<kw type="for" name="${ELEMENT} IN RANGE [ 0 | 3 ]">
<kw type="foritem" name="${ELEMENT} = 0">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip ospf neighbor</arg>
</arguments>
<assign>
<var>${neighbor}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:55.128">${neighbor} = ['R1', 'show ip ospf neighbor']</msg>
<status endtime="20181217 15:41:55.128" starttime="20181217 15:41:55.127" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ospf_neighbor}</arg>
<arg>${neighbor}</arg>
</arguments>
<status endtime="20181217 15:41:55.128" starttime="20181217 15:41:55.128" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:55.128" starttime="20181217 15:41:55.127" status="PASS"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = 1">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip ospf neighbor</arg>
</arguments>
<assign>
<var>${neighbor}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:55.129">${neighbor} = ['R2', 'show ip ospf neighbor']</msg>
<status endtime="20181217 15:41:55.129" starttime="20181217 15:41:55.128" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ospf_neighbor}</arg>
<arg>${neighbor}</arg>
</arguments>
<status endtime="20181217 15:41:55.129" starttime="20181217 15:41:55.129" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:55.129" starttime="20181217 15:41:55.128" status="PASS"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = 2">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip ospf neighbor</arg>
</arguments>
<assign>
<var>${neighbor}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:41:55.130">${neighbor} = ['R3', 'show ip ospf neighbor']</msg>
<status endtime="20181217 15:41:55.130" starttime="20181217 15:41:55.130" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ospf_neighbor}</arg>
<arg>${neighbor}</arg>
</arguments>
<status endtime="20181217 15:41:55.131" starttime="20181217 15:41:55.130" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:55.131" starttime="20181217 15:41:55.129" status="PASS"></status>
</kw>
<status endtime="20181217 15:41:55.131" starttime="20181217 15:41:55.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>show ospf neighbor</arg>
<arg>${ospf_neighbor}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Show Ospf Neighbor">
<arguments>
<arg>${ospf_neighbor}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:42:08.651">Waiting thread #ConfigureRouter_R1

R1#
R1#        show ip ospf neighbor

Neighbor ID     Pri   State           Dead Time   Address         Interface
3.3.3.3           1   FULL/DR         00:00:37    192.168.34.4    Ethernet1/1
2.2.2.2           1   FULL/DR         00:00:30    192.168.23.2    Ethernet1/0
R1#
R1#        
R1#
R1#

R3#
R3#        show ip ospf neighbor

Neighbor ID     Pri   State           Dead Time   Address         Interface
2.2.2.2           1   FULL/BDR        00:00:30    192.168.50.2    Ethernet1/2
1.1.1.1           1   FULL/BDR        00:00:30    192.168.34.3    Ethernet1/1
R3#
R3#        
R3#
R3#

R2#
R2#        show ip ospf neighbor

Neighbor ID     Pri   State           Dead Time   Address         Interface
3.3.3.3           1   FULL/DR         00:00:30    192.168.50.4    Ethernet1/2
1.1.1.1           1   FULL/BDR        00:00:30    192.168.23.3    Ethernet1/0
R2#
R2#        
R2#
R2#
Waiting thread #ConfigureRouter_R2
Waiting thread #ConfigureRouter_R3</msg>
<status endtime="20181217 15:42:08.652" starttime="20181217 15:41:55.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:42:08.652">${result} = True</msg>
<status endtime="20181217 15:42:08.652" starttime="20181217 15:41:55.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>OSPF neighbors are not established in the routers</arg>
</arguments>
<status endtime="20181217 15:42:08.653" starttime="20181217 15:42:08.652" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:08.653" starttime="20181217 15:41:55.126" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:08.653" starttime="20181217 15:41:55.125" status="PASS" critical="yes"></status>
</test>
<test id="s1-t14" name="Check if BGP sessions are established">
<kw library="Resource" name="Check if BGP sessions are established">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Checking if all BGP sessions are established</arg>
</arguments>
<status endtime="20181217 15:42:08.655" starttime="20181217 15:42:08.654" status="PASS"></status>
</kw>
<kw type="for" name="${ELEMENT} IN RANGE [ 1 | 5 ]">
<kw type="foritem" name="${ELEMENT} = 1">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip bgp summary</arg>
</arguments>
<assign>
<var>${bgp}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:42:08.656">${bgp} = ['R2', 'show ip bgp summary']</msg>
<status endtime="20181217 15:42:08.656" starttime="20181217 15:42:08.655" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${bgp_summary}</arg>
<arg>${bgp}</arg>
</arguments>
<status endtime="20181217 15:42:08.656" starttime="20181217 15:42:08.656" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:08.656" starttime="20181217 15:42:08.655" status="PASS"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = 2">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip bgp summary</arg>
</arguments>
<assign>
<var>${bgp}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:42:08.657">${bgp} = ['R3', 'show ip bgp summary']</msg>
<status endtime="20181217 15:42:08.657" starttime="20181217 15:42:08.656" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${bgp_summary}</arg>
<arg>${bgp}</arg>
</arguments>
<status endtime="20181217 15:42:08.657" starttime="20181217 15:42:08.657" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:08.657" starttime="20181217 15:42:08.656" status="PASS"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = 3">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip bgp summary</arg>
</arguments>
<assign>
<var>${bgp}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:42:08.658">${bgp} = ['R4', 'show ip bgp summary']</msg>
<status endtime="20181217 15:42:08.658" starttime="20181217 15:42:08.658" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${bgp_summary}</arg>
<arg>${bgp}</arg>
</arguments>
<status endtime="20181217 15:42:08.659" starttime="20181217 15:42:08.658" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:08.659" starttime="20181217 15:42:08.657" status="PASS"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = 4">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{Devices}[${ELEMENT}]</arg>
<arg>show ip bgp summary</arg>
</arguments>
<assign>
<var>${bgp}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:42:08.659">${bgp} = ['R5', 'show ip bgp summary']</msg>
<status endtime="20181217 15:42:08.659" starttime="20181217 15:42:08.659" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${bgp_summary}</arg>
<arg>${bgp}</arg>
</arguments>
<status endtime="20181217 15:42:08.660" starttime="20181217 15:42:08.659" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:08.660" starttime="20181217 15:42:08.659" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:08.660" starttime="20181217 15:42:08.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>show bgp summary</arg>
<arg>${bgp_summary}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Show Bgp Summary">
<arguments>
<arg>${bgp_summary}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:42:22.281">Waiting thread #ConfigureRouter_R2

R4#
R4#              show ip bgp summary
BGP router identifier 4.4.4.4, local AS number 1
BGP table version is 7, main routing table version 7
6 network entries using 702 bytes of memory
6 path entries using 312 bytes of memory
5/4 BGP path/bestpath attribute entries using 620 bytes of memory
1 BGP AS-PATH entries using 24 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 1658 total bytes of memory
BGP activity 6/0 prefixes, 6/0 paths, scan interval 60 secs

Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
192.168.12.2    4     2       6       6        5    0    0 00:00:53        3
R4#
R4#              
R4#
R4#

R3#
R3#              show ip bgp summary
BGP router identifier 3.3.3.3, local AS number 2
BGP table version is 17, main routing table version 17
6 network entries using 702 bytes of memory
12 path entries using 624 bytes of memory
13/3 BGP path/bestpath attribute entries using 1612 bytes of memory
2 BGP AS-PATH entries using 48 bytes of memory
1 BGP extended community entries using 24 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 3010 total bytes of memory
BGP activity 12/0 prefixes, 18/0 paths, scan interval 60 secs

Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
2.2.2.2         4     2       9       9       17    0    0 00:01:49        6
R3#
R3#              
R3#
R3#

R2#
R2#              show ip bgp summary
BGP router identifier 2.2.2.2, local AS number 2
BGP table version is 7, main routing table version 7
6 network entries using 702 bytes of memory
12 path entries using 624 bytes of memory
13/3 BGP path/bestpath attribute entries using 1612 bytes of memory
2 BGP AS-PATH entries using 48 bytes of memory
1 BGP extended community entries using 24 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 3010 total bytes of memory
BGP activity 12/0 prefixes, 18/0 paths, scan interval 60 secs

Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
3.3.3.3         4     2       9       9        7    0    0 00:01:49        6
R2#
R2#              
R2#
R2#

R5#
R5#              show ip bgp summary
BGP router identifier 5.5.5.5, local AS number 3
BGP table version is 7, main routing table version 7
6 network entries using 702 bytes of memory
6 path entries using 312 bytes of memory
5/4 BGP path/bestpath attribute entries using 620 bytes of memory
1 BGP AS-PATH entries using 24 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 1658 total bytes of memory
BGP activity 6/0 prefixes, 6/0 paths, scan interval 60 secs

Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
192.168.45.4    4     2       6       6        7    0    0 00:00:47        3
R5#
R5#              
R5#
R5#
Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5</msg>
<status endtime="20181217 15:42:22.281" starttime="20181217 15:42:08.660" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:42:22.281">${result} = True</msg>
<status endtime="20181217 15:42:22.281" starttime="20181217 15:42:08.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>BGP sessions are not established in the routers</arg>
</arguments>
<status endtime="20181217 15:42:22.282" starttime="20181217 15:42:22.282" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:22.282" starttime="20181217 15:42:08.654" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:22.283" starttime="20181217 15:42:08.653" status="PASS" critical="yes"></status>
</test>
<test id="s1-t15" name="Ensure that different autonomous systems can communicate with each other">
<kw library="Resource" name="Ensure that different autonomous systems can communicate with each other">
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Autonomous system communication validated</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:42:22.284">Autonomous system communication validated</msg>
<status endtime="20181217 15:42:22.284" starttime="20181217 15:42:22.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Verify Ping operation from PC-1 to Ubuntu</arg>
</arguments>
<status endtime="20181217 15:42:22.285" starttime="20181217 15:42:22.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ping router</arg>
<arg>PC-1</arg>
<arg>ping</arg>
<arg>${Host2_IP}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="operational_ph" name="Ping Router">
<arguments>
<arg>PC-1</arg>
<arg>ping</arg>
<arg>${Host2_IP}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:42:37.549">ping
ping 192.168.80.20 -c 5 
192.168.80.20 icmp_seq=1 timeout
84 bytes from 192.168.80.20 icmp_seq=2 ttl=60 time=60.298 ms
84 bytes from 192.168.80.20 icmp_seq=3 ttl=60 time=45.036 ms
84 bytes from 192.168.80.20 icmp_seq=4 ttl=60 time=45.475 ms</msg>
<status endtime="20181217 15:42:37.549" starttime="20181217 15:42:22.285" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:42:37.550">${result} = True</msg>
<status endtime="20181217 15:42:37.550" starttime="20181217 15:42:22.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to reach from PC-1 to Ubuntu</arg>
</arguments>
<status endtime="20181217 15:42:37.551" starttime="20181217 15:42:37.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Verify Ping operation from Ubuntu to PC-1</arg>
</arguments>
<status endtime="20181217 15:42:37.551" starttime="20181217 15:42:37.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ping router</arg>
<arg>Ubuntu</arg>
<arg>ping</arg>
<arg>${Host1_IP}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="operational_ph" name="Ping Router">
<arguments>
<arg>Ubuntu</arg>
<arg>ping</arg>
<arg>${Host1_IP}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:42:52.715">ping
ping 192.168.70.20 -c 5 
PING 192.168.70.20 (192.168.70.20) 56(84) bytes of data.
64 bytes from 192.168.70.20: icmp_seq=1 ttl=60 time=50.1 ms
64 bytes from 192.168.70.20: icmp_seq=2 ttl=60 time=44.3 ms
64 bytes from 192.168.70.20: icmp_seq=3 ttl=60 time=48.5 ms
64 bytes from 192.168.70.20: icmp_seq=4 ttl=60 time=43.1 ms
64 bytes from 192.168.70.20: icmp_seq=5 ttl=60 time=48.4 ms

--- 192.168.70.20 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4003ms
rtt min/avg/max/mdev = 43.165/46.934/50.155/2.708 ms
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~#</msg>
<status endtime="20181217 15:42:52.716" starttime="20181217 15:42:37.552" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:42:52.716">${result} = True</msg>
<status endtime="20181217 15:42:52.716" starttime="20181217 15:42:37.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to reach from Ubuntu to PC-1</arg>
</arguments>
<status endtime="20181217 15:42:52.717" starttime="20181217 15:42:52.716" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:52.717" starttime="20181217 15:42:22.284" status="PASS"></status>
</kw>
<status endtime="20181217 15:42:52.717" starttime="20181217 15:42:22.283" status="PASS" critical="yes"></status>
</test>
<test id="s1-t16" name="Ensure the VRF reachability between PE routers">
<kw library="Resource" name="Ensure the VRF reachability between PE routers">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Verify VRF ping from PE router (R2,R3) to Host</arg>
</arguments>
<status endtime="20181217 15:42:52.719" starttime="20181217 15:42:52.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${VRF_NAME}</arg>
<arg>${Host2_IP}</arg>
</arguments>
<assign>
<var>${ping_vrf_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:42:52.719">${ping_vrf_R2} = ['R2', 'VRF1', '192.168.80.20']</msg>
<status endtime="20181217 15:42:52.719" starttime="20181217 15:42:52.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${VRF_NAME}</arg>
<arg>${Host1_IP}</arg>
</arguments>
<assign>
<var>${ping_vrf_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:42:52.720">${ping_vrf_R3} = ['R3', 'VRF1', '192.168.70.20']</msg>
<status endtime="20181217 15:42:52.720" starttime="20181217 15:42:52.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ping_vrf_R2}</arg>
<arg>${ping_vrf_R3}</arg>
</arguments>
<assign>
<var>${load_ping_vrf}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:42:52.721">${load_ping_vrf} = [['R2', 'VRF1', '192.168.80.20'], ['R3', 'VRF1', '192.168.70.20']]</msg>
<status endtime="20181217 15:42:52.721" starttime="20181217 15:42:52.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ping vrf</arg>
<arg>${load_ping_vrf}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Ping Vrf">
<arguments>
<arg>${load_ping_vrf}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:43:05.940">Waiting thread #ConfigureRouter_R2
ping vrf VRF1 192.168.80.20

Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 192.168.80.20, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 8/28/44 ms
R2#
Waiting thread #ConfigureRouter_R3
ping vrf VRF1 192.168.70.20

Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 192.168.70.20, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 24/26/28 ms
R3#</msg>
<status endtime="20181217 15:43:05.940" starttime="20181217 15:42:52.721" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:43:05.940">${result} = True</msg>
<status endtime="20181217 15:43:05.940" starttime="20181217 15:42:52.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to reach Host from VRF1</arg>
</arguments>
<status endtime="20181217 15:43:05.941" starttime="20181217 15:43:05.941" status="PASS"></status>
</kw>
<status endtime="20181217 15:43:05.942" starttime="20181217 15:42:52.718" status="PASS"></status>
</kw>
<status endtime="20181217 15:43:05.942" starttime="20181217 15:42:52.718" status="PASS" critical="yes"></status>
</test>
<kw library="Resource" type="teardown" name="Teardown Actions">
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Teardown Actions done here</arg>
</arguments>
<status endtime="20181217 15:43:05.946" starttime="20181217 15:43:05.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Unconfiguring IP_Address</arg>
</arguments>
<status endtime="20181217 15:43:05.946" starttime="20181217 15:43:05.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Links_of_R1}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R1}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:05.946">${ip_addr_R1} = ['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'unconfigure']</msg>
<status endtime="20181217 15:43:05.946" starttime="20181217 15:43:05.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${Links_of_R2}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:05.947">${ip_addr_R2} = ['R2', ['Link_R1_R2_1', 'Link_R2_R4_1', 'Link_R2_R3_1'], 'unconfigure']</msg>
<status endtime="20181217 15:43:05.947" starttime="20181217 15:43:05.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${Links_of_R3}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:05.947">${ip_addr_R3} = ['R3', ['Link_R1_R3_1', 'Link_R3_R5_1', 'Link_R2_R3_1'], 'unconfigure']</msg>
<status endtime="20181217 15:43:05.948" starttime="20181217 15:43:05.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${Links_of_R4}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R4}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:05.948">${ip_addr_R4} = ['R4', ['Link_R2_R4_1', 'Link_R4_PC-1_1'], 'unconfigure']</msg>
<status endtime="20181217 15:43:05.948" starttime="20181217 15:43:05.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${Links_of_R5}</arg>
<arg>unconfigure</arg>
</arguments>
<assign>
<var>${ip_addr_R5}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:05.949">${ip_addr_R5} = ['R5', ['Link_R3_R5_1', 'Link_R5_PC-2_1'], 'unconfigure']</msg>
<status endtime="20181217 15:43:05.949" starttime="20181217 15:43:05.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>PC-1</arg>
<arg>unconfigure</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ip_addr_PC1}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:05.949">${ip_addr_PC1} = ['PC-1', 'unconfigure', '255.255.255.0']</msg>
<status endtime="20181217 15:43:05.949" starttime="20181217 15:43:05.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>Ubuntu</arg>
<arg>unconfigure</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${ip_addr_PC2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:05.950">${ip_addr_PC2} = ['Ubuntu', 'unconfigure', '255.255.255.0']</msg>
<status endtime="20181217 15:43:05.950" starttime="20181217 15:43:05.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ip_addr_R1}</arg>
<arg>${ip_addr_R2}</arg>
<arg>${ip_addr_R3}</arg>
<arg>${ip_addr_R4}</arg>
<arg>${ip_addr_R5}</arg>
<arg>${ip_addr_PC1}</arg>
<arg>${ip_addr_PC2}</arg>
</arguments>
<assign>
<var>${unconfig_ip}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:05.950">${unconfig_ip} = [['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'unconfigure'], ['R2', ['Link_R1_R2_1', 'Link_R2_R4_1', 'Link_R2_R3_1'], 'unconfigure'], ['R3', ['Link_R1_R3_1', 'Link_R3_R5_1', 'Link_R2_R3_1'], 'unconfigure...</msg>
<status endtime="20181217 15:43:05.950" starttime="20181217 15:43:05.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start configure</arg>
<arg>${unconfig_ip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure">
<arguments>
<arg>${unconfig_ip}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:43:34.752">Configuring IP address for R1Configuring IP address for R2Configuring IP address for R3Configuring IP address for R4Configuring IP address for R5Waiting thread #ConfigureRouter_R1

R4#
R4#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#              interface Ethernet 1/0
R4(config-if)#
R4(config-if)#              no ip address 192.168.12.1  255.255.255.0
R4(config-if)#
R4(config-if)#              shutdown
R4(config-if)#
R4(config-if)#              

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/1
R3(config-if)#
R3(config-if)#              no ip address 192.168.34.4  255.255.255.0
R3(config-if)#
R3(config-if)#              shutdown
R3(config-if)#
R3(config-if)#              

R5#
R5#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#              interface Ethernet 1/0
R5(config-if)#
R5(config-if)#              no ip address 192.168.45.6  255.255.255.0
R5(config-if)#
R5(config-if)#              shutdown
R5(config-if)#
R5(config-if)#              

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/0
R2(config-if)#
R2(config-if)#              no ip address 192.168.23.2  255.255.255.0
R2(config-if)#
R2(config-if)#              shutdown
R2(config-if)#
R2(config-if)#              

R1#
R1#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#              interface Ethernet 1/0
R1(config-if)#
R1(config-if)#              no ip address 192.168.23.3  255.255.255.0
R1(config-if)#
R1(config-if)#              shutdown
R1(config-if)#
R1(config-if)#              
clear ip
IPv4 address/mask, gateway, DNS, and DHCP cleared

PC-1&gt; 
ifconfig eth0 0

]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 
]0;root@UbuntuDockerGuest-1: ~root@UbuntuDockerGuest-1:~# 

R4#
R4#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#              interface Ethernet 1/1
R4(config-if)#
R4(config-if)#              no ip address 192.168.70.10  255.255.255.0
R4(config-if)#
R4(config-if)#              shutdown
R4(config-if)#
R4(config-if)#              

R5#
R5#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#              interface Ethernet 1/1
R5(config-if)#
R5(config-if)#              no ip address 192.168.80.10  255.255.255.0
R5(config-if)#
R5(config-if)#              shutdown
R5(config-if)#
R5(config-if)#              
Configured  IP Address for R4
R1#
R1#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#              interface Ethernet 1/1
R1(config-if)#
R1(config-if)#              no ip address 192.168.34.3  255.255.255.0
R1(config-if)#
R1(config-if)#              shutdown
R1(config-if)#
R1(config-if)#              

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/0
R3(config-if)#
R3(config-if)#              no ip address 192.168.45.4  255.255.255.0
R3(config-if)#
R3(config-if)#              shutdown
R3(config-if)#
R3(config-if)#              
Configured  IP Address for R5Configured  IP Address for R1Waiting thread #ConfigureRouter_R2

R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/1
R2(config-if)#
R2(config-if)#              no ip address 192.168.12.2  255.255.255.0
R2(config-if)#
R2(config-if)#              shutdown
R2(config-if)#
R2(config-if)#              

R3#
R3#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#              interface Ethernet 1/2
R3(config-if)#
R3(config-if)#              no ip address 192.168.50.4  255.255.255.0
R3(config-if)#
R3(config-if)#              shutdown
R3(config-if)#
R3(config-if)#              
Configured  IP Address for R3
R2#
R2#              configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#              interface Ethernet 1/2
R2(config-if)#
R2(config-if)#              no ip address 192.168.50.2  255.255.255.0
R2(config-if)#
R2(config-if)#              shutdown
R2(config-if)#
R2(config-if)#              
Configured  IP Address for R2Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5
Waiting thread #ConfigureRouter_PC-1
Waiting thread #ConfigureRouter_Ubuntu</msg>
<status endtime="20181217 15:43:34.752" starttime="20181217 15:43:05.951" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:43:34.752">${result} = True</msg>
<status endtime="20181217 15:43:34.752" starttime="20181217 15:43:05.951" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to clear IP address on the routers</arg>
</arguments>
<status endtime="20181217 15:43:34.753" starttime="20181217 15:43:34.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>IP_Address cleared on all Routers</arg>
</arguments>
<status endtime="20181217 15:43:34.754" starttime="20181217 15:43:34.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Unconfiguring Loopback interface</arg>
</arguments>
<status endtime="20181217 15:43:34.754" starttime="20181217 15:43:34.754" status="PASS"></status>
</kw>
<kw type="for" name="${var} IN [ @{Devices} ]">
<kw type="foritem" name="${var} = R1">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:34.755">${clear_lo} = ['R1', 'unset']</msg>
<status endtime="20181217 15:43:34.755" starttime="20181217 15:43:34.755" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status endtime="20181217 15:43:34.756" starttime="20181217 15:43:34.755" status="PASS"></status>
</kw>
<status endtime="20181217 15:43:34.756" starttime="20181217 15:43:34.755" status="PASS"></status>
</kw>
<kw type="foritem" name="${var} = R2">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:34.756">${clear_lo} = ['R2', 'unset']</msg>
<status endtime="20181217 15:43:34.756" starttime="20181217 15:43:34.756" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status endtime="20181217 15:43:34.757" starttime="20181217 15:43:34.756" status="PASS"></status>
</kw>
<status endtime="20181217 15:43:34.757" starttime="20181217 15:43:34.756" status="PASS"></status>
</kw>
<kw type="foritem" name="${var} = R3">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:34.757">${clear_lo} = ['R3', 'unset']</msg>
<status endtime="20181217 15:43:34.757" starttime="20181217 15:43:34.757" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status endtime="20181217 15:43:34.758" starttime="20181217 15:43:34.757" status="PASS"></status>
</kw>
<status endtime="20181217 15:43:34.758" starttime="20181217 15:43:34.757" status="PASS"></status>
</kw>
<kw type="foritem" name="${var} = R4">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:34.758">${clear_lo} = ['R4', 'unset']</msg>
<status endtime="20181217 15:43:34.758" starttime="20181217 15:43:34.758" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status endtime="20181217 15:43:34.759" starttime="20181217 15:43:34.758" status="PASS"></status>
</kw>
<status endtime="20181217 15:43:34.759" starttime="20181217 15:43:34.758" status="PASS"></status>
</kw>
<kw type="foritem" name="${var} = R5">
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${var}</arg>
<arg>unset</arg>
</arguments>
<assign>
<var>${clear_lo}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:34.759">${clear_lo} = ['R5', 'unset']</msg>
<status endtime="20181217 15:43:34.759" starttime="20181217 15:43:34.759" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${clear_lo_devices}</arg>
<arg>${clear_lo}</arg>
</arguments>
<status endtime="20181217 15:43:34.760" starttime="20181217 15:43:34.759" status="PASS"></status>
</kw>
<status endtime="20181217 15:43:34.760" starttime="20181217 15:43:34.759" status="PASS"></status>
</kw>
<status endtime="20181217 15:43:34.760" starttime="20181217 15:43:34.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start configure loopback</arg>
<arg>${clear_lo_devices}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Loopback">
<arguments>
<arg>${clear_lo_devices}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:43:44.104">Waiting thread #ConfigureRouter_R1

R1#
R1#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#          interface loopback0
R1(config-if)#
R1(config-if)#          no ip address 1.1.1.1  255.255.255.255
R1(config-if)#
R1(config-if)#          end
R1#
R1#          
Waiting thread #ConfigureRouter_R2

R4#
R4#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#          interface loopback0
R4(config-if)#
R4(config-if)#          no ip address 4.4.4.4  255.255.255.255
R4(config-if)#
R4(config-if)#          end
R4#
R4#          

R5#
R5#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#          interface loopback0
R5(config-if)#
R5(config-if)#          no ip address 5.5.5.5  255.255.255.255
R5(config-if)#
R5(config-if)#          end
R5#
R5#          

R3#
R3#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#          interface loopback0
R3(config-if)#
R3(config-if)#          no ip address 3.3.3.3  255.255.255.255
R3(config-if)#
R3(config-if)#          end
R3#
R3#          

R2#
R2#          configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#          interface loopback0
R2(config-if)#
R2(config-if)#          no ip address 2.2.2.2  255.255.255.255
R2(config-if)#
R2(config-if)#          end
R2#
R2#          
Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4
Waiting thread #ConfigureRouter_R5</msg>
<status endtime="20181217 15:43:44.105" starttime="20181217 15:43:34.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:43:44.105">${result} = True</msg>
<status endtime="20181217 15:43:44.105" starttime="20181217 15:43:34.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to clear Loopback address on the interfaces</arg>
</arguments>
<status endtime="20181217 15:43:44.106" starttime="20181217 15:43:44.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Loopback_Address cleared on all Routers</arg>
</arguments>
<status endtime="20181217 15:43:44.106" starttime="20181217 15:43:44.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Clearing VRFs on PE routers</arg>
</arguments>
<status endtime="20181217 15:43:44.107" starttime="20181217 15:43:44.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${VRF_NAME}</arg>
<arg>${RD}</arg>
<arg>${RT}</arg>
<arg>${VRF_R2_Interface}</arg>
<arg>${R4_einterface}</arg>
<arg>${mask}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${vrf_R2_clear}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:44.107">${vrf_R2_clear} = ['R2', 'VRF1', '1:1', '10:10', ['Link_R2_VRF'], '192.168.12.2', '255.255.255.0', 'disable']</msg>
<status endtime="20181217 15:43:44.108" starttime="20181217 15:43:44.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${VRF_NAME}</arg>
<arg>${RD}</arg>
<arg>${RT}</arg>
<arg>${VRF_R3_Interface}</arg>
<arg>${R5_einterface}</arg>
<arg>${mask}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${vrf_R3_clear}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:44.108">${vrf_R3_clear} = ['R3', 'VRF1', '1:1', '10:10', ['Link_R3_VRF'], '192.168.45.4', '255.255.255.0', 'disable']</msg>
<status endtime="20181217 15:43:44.108" starttime="20181217 15:43:44.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${vrf_R2_clear}</arg>
<arg>${vrf_R3_clear}</arg>
</arguments>
<assign>
<var>${vrf_config_clear}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:44.109">${vrf_config_clear} = [['R2', 'VRF1', '1:1', '10:10', ['Link_R2_VRF'], '192.168.12.2', '255.255.255.0', 'disable'], ['R3', 'VRF1', '1:1', '10:10', ['Link_R3_VRF'], '192.168.45.4', '255.255.255.0', 'disable']]</msg>
<status endtime="20181217 15:43:44.109" starttime="20181217 15:43:44.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_configure_vrf</arg>
<arg>${vrf_config_clear}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Vrf">
<arguments>
<arg>${vrf_config_clear}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:43:55.867">Waiting thread #ConfigureRouter_R2

R2#
R2#                            configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                            no ip vrf VRF1
% IP addresses from all interfaces in VRF VRF1 have been removed
R2(config)#
R2(config)#                            interface  Ethernet 1/1
R2(config-if)#
R2(config-if)#                            no ip vrf forwarding  VRF1
R2(config-if)#
R2(config-if)#                            no ip address 192.168.12.2 255.255.$                 no ip address 192.168.12.2 255.255.2         55.0
Invalid address
R2(config-if)#
R2(config-if)#                            
Waiting thread #ConfigureRouter_R3

R3#
R3#                            configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                            no ip vrf VRF1
% IP addresses from all interfaces in VRF VRF1 have been removed
R3(config)#
R3(config)#                            interface  Ethernet 1/0
R3(config-if)#
R3(config-if)#                            no ip vrf forwarding  VRF1
R3(config-if)#
R3(config-if)#                            no ip address 192.168.45.4 255.255.$                 no ip address 192.168.45.4 255.255.2         55.0
Invalid address
R3(config-if)#
R3(config-if)#</msg>
<status endtime="20181217 15:43:55.868" starttime="20181217 15:43:44.109" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:43:55.868">${result} = True</msg>
<status endtime="20181217 15:43:55.868" starttime="20181217 15:43:44.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Removing VRFs on Routers has failed</arg>
</arguments>
<status endtime="20181217 15:43:55.869" starttime="20181217 15:43:55.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Cleared VRFs configuration in Routers</arg>
</arguments>
<status endtime="20181217 15:43:55.869" starttime="20181217 15:43:55.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Disable MPLS on PE router R2 and R3</arg>
</arguments>
<status endtime="20181217 15:43:55.870" starttime="20181217 15:43:55.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Links_of_R1}</arg>
<arg>${MPLS_LABEL_PROTO}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${mpls_R1_clear}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:55.870">${mpls_R1_clear} = ['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'ldp', 'disable']</msg>
<status endtime="20181217 15:43:55.870" starttime="20181217 15:43:55.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${MPLS_R2_Interface}</arg>
<arg>${MPLS_LABEL_PROTO}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${mpls_R2_clear}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:55.871">${mpls_R2_clear} = ['R2', ['Link_R2_MPLS'], 'ldp', 'disable']</msg>
<status endtime="20181217 15:43:55.871" starttime="20181217 15:43:55.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${MPLS_R3_Interface}</arg>
<arg>${MPLS_LABEL_PROTO}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${mpls_R3_clear}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:55.872">${mpls_R3_clear} = ['R3', ['Link_R3_MPLS'], 'ldp', 'disable']</msg>
<status endtime="20181217 15:43:55.872" starttime="20181217 15:43:55.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${mpls_R1_clear}</arg>
<arg>${mpls_R2_clear}</arg>
<arg>${mpls_R3_clear}</arg>
</arguments>
<assign>
<var>${mpls_config_clear}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:43:55.872">${mpls_config_clear} = [['R1', ['Link_R1_R2_1', 'Link_R1_R3_1'], 'ldp', 'disable'], ['R2', ['Link_R2_MPLS'], 'ldp', 'disable'], ['R3', ['Link_R3_MPLS'], 'ldp', 'disable']]</msg>
<status endtime="20181217 15:43:55.872" starttime="20181217 15:43:55.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_mpls_bgp</arg>
<arg>${mpls_config_clear}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Mpls Bgp">
<arguments>
<arg>${mpls_config_clear}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:44:23.245">Waiting thread #ConfigureRouter_R1

R1#
R1#                           configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                           no mpls label protocol ldp
R1(config)#
R1(config)#                           no mpls ldp router-id Loopback0 force
R1(config)#
R1(config)#                           interface Ethernet 1/0
R1(config-if)#
R1(config-if)#                           no mpls ip
R1(config-if)#
R1(config-if)#                           no mpls label protocol ldp
R1(config-if)#
R1(config-if)#                           

R2#
R2#                           configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                           no mpls label protocol ldp
R2(config)#
R2(config)#                           no mpls ldp router-id Loopback0 force
R2(config)#
R2(config)#                           interface Ethernet 1/2
R2(config-if)#
R2(config-if)#                           no mpls ip
R2(config-if)#
R2(config-if)#                           no mpls label protocol ldp
R2(config-if)#
R2(config-if)#                           

R3#
R3#                           configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                           no mpls label protocol ldp
R3(config)#
R3(config)#                           no mpls ldp router-id Loopback0 force
R3(config)#
R3(config)#                           interface Ethernet 1/2
R3(config-if)#
R3(config-if)#                           no mpls ip
R3(config-if)#
R3(config-if)#                           no mpls label protocol ldp
R3(config-if)#
R3(config-if)#                           

R1#
R1#                           configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                           no mpls label protocol ldp
R1(config)#
R1(config)#                           no mpls ldp router-id Loopback0 force
R1(config)#
R1(config)#                           interface Ethernet 1/1
R1(config-if)#
R1(config-if)#                           no mpls ip
R1(config-if)#
R1(config-if)#                           no mpls label protocol ldp
R1(config-if)#
R1(config-if)#                           
Waiting thread #ConfigureRouter_R2
Waiting thread #ConfigureRouter_R3</msg>
<status endtime="20181217 15:44:23.245" starttime="20181217 15:43:55.873" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:44:23.245">${result} = True</msg>
<status endtime="20181217 15:44:23.246" starttime="20181217 15:43:55.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Unable to clear MP-BGP on PE routers</arg>
</arguments>
<status endtime="20181217 15:44:23.246" starttime="20181217 15:44:23.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Clearing OSPF configuration</arg>
</arguments>
<status endtime="20181217 15:44:23.247" starttime="20181217 15:44:23.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R1</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R1}</arg>
<arg>${Area1}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${ospf_R1}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:23.247">${ospf_R1} = ['R1', 1, ['192.168.23.0  0.0.0.255', '192.168.34.0  0.0.0.255', '1.1.1.0  0.0.0.255'], 0, 'disable']</msg>
<status endtime="20181217 15:44:23.247" starttime="20181217 15:44:23.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R2}</arg>
<arg>${Area1}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${ospf_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:23.248">${ospf_R2} = ['R2', 1, ['192.168.23.0  0.0.0.255', '192.168.50.0  0.0.0.255', '2.2.2.0  0.0.0.255'], 0, 'disable']</msg>
<status endtime="20181217 15:44:23.248" starttime="20181217 15:44:23.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${Process_id}</arg>
<arg>${Networks_connected_to_R3}</arg>
<arg>${Area1}</arg>
<arg>disable</arg>
</arguments>
<assign>
<var>${ospf_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:23.249">${ospf_R3} = ['R3', 1, ['192.168.34.0  0.0.0.255', '192.168.50.0  0.0.0.255', '3.3.3.0  0.0.0.255'], 0, 'disable']</msg>
<status endtime="20181217 15:44:23.249" starttime="20181217 15:44:23.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${ospf_R1}</arg>
<arg>${ospf_R2}</arg>
<arg>${ospf_R3}</arg>
</arguments>
<assign>
<var>${clear_ospf}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:23.249">${clear_ospf} = [['R1', 1, ['192.168.23.0  0.0.0.255', '192.168.34.0  0.0.0.255', '1.1.1.0  0.0.0.255'], 0, 'disable'], ['R2', 1, ['192.168.23.0  0.0.0.255', '192.168.50.0  0.0.0.255', '2.2.2.0  0.0.0.255'], 0, 'disa...</msg>
<status endtime="20181217 15:44:23.249" starttime="20181217 15:44:23.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>start_configure_ospf</arg>
<arg>${clear_ospf}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Start Configure Ospf">
<arguments>
<arg>${clear_ospf}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:44:42.758">Waiting thread #ConfigureRouter_R1

R1#
R1#                    configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)#
R1(config)#                    no router ospf 1
R1(config)#
R1(config)#                    end
R1#
R1#                    
R1#
R1#
*Dec 17 15:37:22.759: %SYS-5-CONFIG_I: Configured from console by console
R1#
Waiting thread #ConfigureRouter_R2

R2#
R2#                    configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                    no router ospf 1
R2(config)#
R2(config)#                    end
R2#
R2#                    
R2#
R2#
*Dec 17 15:32:44.843: %SYS-5-CONFIG_I: Configured from console by console
R2#
Waiting thread #ConfigureRouter_R3

R3#
R3#                    configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                    no router ospf 1
R3(config)#
R3(config)#                    end
R3#
R3#                    
R3#
R3#
*Dec 17 15:32:56.483: %SYS-5-CONFIG_I: Configured from console by console
R3#</msg>
<status endtime="20181217 15:44:42.759" starttime="20181217 15:44:23.250" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:44:42.759">${result} = True</msg>
<status endtime="20181217 15:44:42.759" starttime="20181217 15:44:23.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Clearing OSPF on Routers has failed</arg>
</arguments>
<status endtime="20181217 15:44:42.760" starttime="20181217 15:44:42.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>OSPF unconfigured in Routers</arg>
</arguments>
<status endtime="20181217 15:44:42.761" starttime="20181217 15:44:42.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Clearing BGP configuration</arg>
</arguments>
<status endtime="20181217 15:44:42.761" starttime="20181217 15:44:42.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R2</arg>
<arg>${R2_AS_id}</arg>
<arg>${R2_einterface}</arg>
<arg>${R2_neighbor_AS_id}</arg>
<arg>disable</arg>
<arg>${R4_R2_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${clear_R2}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:42.762">${clear_R2} = ['R2', 2, '192.168.12.1', 1, 'disable', '192.168.12.0', '255.255.255.0']</msg>
<status endtime="20181217 15:44:42.762" starttime="20181217 15:44:42.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R3</arg>
<arg>${R3_AS_id}</arg>
<arg>${R3_einterface}</arg>
<arg>${R3_neighbor_AS_id}</arg>
<arg>disable</arg>
<arg>${R3_R5_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${clear_R3}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:42.763">${clear_R3} = ['R3', 2, '192.168.45.6', 3, 'disable', '192.168.45.0', '255.255.255.0']</msg>
<status endtime="20181217 15:44:42.763" starttime="20181217 15:44:42.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R4</arg>
<arg>${R4_AS_id}</arg>
<arg>${R4_einterface}</arg>
<arg>${R4_neighbor_AS_id}</arg>
<arg>disable</arg>
<arg>${R4_R2_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${clear_R4}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:42.763">${clear_R4} = ['R4', 1, '192.168.12.2', 2, 'disable', '192.168.12.0', '255.255.255.0']</msg>
<status endtime="20181217 15:44:42.763" starttime="20181217 15:44:42.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>R5</arg>
<arg>${R5_AS_id}</arg>
<arg>${R5_einterface}</arg>
<arg>${R5_neighbor_AS_id}</arg>
<arg>disable</arg>
<arg>${R3_R5_network}</arg>
<arg>${mask}</arg>
</arguments>
<assign>
<var>${clear_R5}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:42.764">${clear_R5} = ['R5', 3, '192.168.45.4', 2, 'disable', '192.168.45.0', '255.255.255.0']</msg>
<status endtime="20181217 15:44:42.764" starttime="20181217 15:44:42.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${clear_R2}</arg>
<arg>${clear_R3}</arg>
<arg>${clear_R4}</arg>
<arg>${clear_R5}</arg>
</arguments>
<assign>
<var>${clear_ebgp}</var>
</assign>
<msg level="INFO" timestamp="20181217 15:44:42.765">${clear_ebgp} = [['R2', 2, '192.168.12.1', 1, 'disable', '192.168.12.0', '255.255.255.0'], ['R3', 2, '192.168.45.6', 3, 'disable', '192.168.45.0', '255.255.255.0'], ['R4', 1, '192.168.12.2', 2, 'disable', '192.168.12...</msg>
<status endtime="20181217 15:44:42.765" starttime="20181217 15:44:42.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ebgp configure</arg>
<arg>${clear_ebgp}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw library="config_ip" name="Ebgp Configure">
<arguments>
<arg>${clear_ebgp}</arg>
</arguments>
<msg level="INFO" timestamp="20181217 15:44:53.510">Waiting thread #ConfigureRouter_R2

R3#
R3#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)#
R3(config)#                        no router bgp 2
R3(config)#
R3(config)#                        

R2#
R2#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)#
R2(config)#                        no router bgp 2
R2(config)#
R2(config)#                        
Waiting thread #ConfigureRouter_R3
Waiting thread #ConfigureRouter_R4

R4#
R4#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)#
R4(config)#                        no router bgp 1
R4(config)#
R4(config)#                        

R5#
R5#                        configure terminal
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)#
R5(config)#                        no router bgp 3
R5(config)#
R5(config)#                        
Waiting thread #ConfigureRouter_R5</msg>
<status endtime="20181217 15:44:53.510" starttime="20181217 15:44:42.766" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20181217 15:44:53.510">${result} = True</msg>
<status endtime="20181217 15:44:53.510" starttime="20181217 15:44:42.766" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}==False</arg>
<arg>FAIL</arg>
<arg>Clearing BGP on Routers has failed</arg>
</arguments>
<status endtime="20181217 15:44:53.511" starttime="20181217 15:44:53.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BGP unconfigured on Routers R2,R3,R4 and R5</arg>
</arguments>
<status endtime="20181217 15:44:53.512" starttime="20181217 15:44:53.512" status="PASS"></status>
</kw>
<status endtime="20181217 15:44:53.512" starttime="20181217 15:43:05.945" status="PASS"></status>
</kw>
<doc>A test suite with tests for configuring BGP.
Topology:-
____________________________
| R1 AS2 |
| /  |
| /  |
| R2------ R3 |
|_________|________|_________|
| |
______|__ ___|______
| AS1| | AS3|
| R4 | | R5 |
|_________| |__________|</doc>
<metadata>
<item name="Version">1.0
More Info For more information about Robot Framework see http://robotframework.org
Author Payal Jain
Date 19 Dec 2016
Executed At ${HOST}
Test Framework Robot Framework Python</item>
</metadata>
<status endtime="20181217 15:44:53.512" starttime="20181217 15:37:59.218" status="PASS"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="16">Critical Tests</stat>
<stat fail="0" pass="16">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" pass="16" name="BGP L3VPN" id="s1">BGP L3VPN</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
